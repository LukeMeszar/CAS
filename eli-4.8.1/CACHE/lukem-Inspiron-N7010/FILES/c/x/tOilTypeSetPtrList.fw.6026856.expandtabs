@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: PtrList.fw,v 1.7 2009/01/02 10:30:14 peter Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements linear lists whose elements are of type tOilTypeSet
which must be a pointer type.
The list type is tOilTypeSetList.

The element type tOilTypeSet given by the instance parameter 
must be defined in a header file oiladt2
where oiladt2 is the value of the referto parameter.

Instantiation of this module creates a header file that defines
the same entities as defined by the List module.
They are mapped to those of an instance of the
List module with VoidPtr (void*) being its element type.

Hence, several instances of this module reuse only one implementation
of list operations without loss of type safety.

~O~<tOilTypeSetPtrList.specs~>~{
$/Adt/List.gnrc+instance=VoidPtr+referto=VoidPtr:inst
~}

~O~<tOilTypeSetList.h~>~{
#ifndef _tOilTypeSetLIST_H
#define _tOilTypeSetLIST_H

/* include header file defining tOilTypeSet if oiladt2 is set: */
#define EMPTYoiladt2HDR
#ifndef EMPTYHDR
#include "oiladt2.h"
#endif
#undef EMPTYoiladt2HDR

#include "VoidPtrList.h"

typedef VoidPtrList     tOilTypeSetList;
typedef VoidPtrList    *tOilTypeSetListPtr;
typedef VoidPtrCmpFctType     tOilTypeSetCmpFctType;

#define NULLtOilTypeSetList             ((tOilTypeSetList)0)
#define NulltOilTypeSetList()   ((tOilTypeSetList)0)
#define SingletOilTypeSetList(e)        (ConstOilTypeSetList((e),NULLtOilTypeSetList))

#define FinltOilTypeSetList             FinlVoidPtrList

#define ConstOilTypeSetList(e,l)        ConsVoidPtrList ((VoidPtr)(e),(l))

#define HeadtOilTypeSetList(l)  ((tOilTypeSet)(HeadVoidPtrList (l)))

#define TailtOilTypeSetList(l)  TailVoidPtrList (l)

#define LengthtOilTypeSetList(l)        LengthVoidPtrList (l)

#define IthElemtOilTypeSetList(l,i)     ((tOilTypeSet)(IthElemVoidPtrList (l, i)))

#define CopytOilTypeSetList(l,cp)       CopyVoidPtrList (l, cp)

#define ApptOilTypeSetList(l1,l2)       AppVoidPtrList (l1, l2)

#define AppEltOilTypeSetList(l,e)       AppElVoidPtrList (l, (VoidPtr)e)

#define InsertAftertOilTypeSetList(l,e) \
        InsertAfterVoidPtrList (l, (VoidPtr)e)

#define OrderedInserttOilTypeSetList(l,e,fcmp) \
        OrderedInsertVoidPtrList (l, (VoidPtr)e, (VoidPtrCmpFctType)fcmp)

#define RefEndConstOilTypeSetList(addr,e) \
        RefEndConsVoidPtrList (addr, (VoidPtr)e)

#define RefEndApptOilTypeSetList(addr,l) \
        RefEndAppVoidPtrList (addr, l)

#define ElemIntOilTypeSetList(e,l,cmpfct) \
        ElemInVoidPtrList ((VoidPtr)e, l, (VoidPtrCmpFctType)cmpfct)

#define AddToSettOilTypeSetList(e,l,cmpfct) \
        AddToSetVoidPtrList ((VoidPtr)e, l, (VoidPtrCmpFctType)cmpfct)

#define AddToOrderedSettOilTypeSetList(e,l,cmpfct) \
        AddToOrderedSetVoidPtrList ((VoidPtr)e, l, (VoidPtrCmpFctType)cmpfct)

#define MaptOilTypeSetList(l,f) \
        MapVoidPtrList (l,(VoidPtrMapFct)f)

#define ComptOilTypeSetList(l1,l2,f) \
        CompVoidPtrList (l1, l2, (VoidPtrCmpFctType)f)

#define SumtOilTypeSetList(l,f,a) \
        SumVoidPtrList (l, (VoidPtrSumFct)f, (VoidPtr)a)

#ifdef MONITOR
#define DAPTO_RESULTtOilTypeSetList(l) DAPTO_RESULT_PTR(l)
#define DAPTO_ARGtOilTypeSetList(l)    DAPTO_ARG_PTR (l, tOilTypeSetList)
#endif

#endif
~}

~O~<tOilTypeSetPtrList.head~>~{
#include "tOilTypeSetList.h"
~}

~O~<tOilTypeSetPtrList.dapto~>~{
aspect tOilTypeSetPtrList;

"tOilTypeSetList.h"

operation get_tOilTypeSetList_elems
    "Return the tOilTypeSet list elements"
    (tOilTypeSetList lst "The list") : str
{
    tOilTypeSet elem;

    for ( ; lst != NULLtOilTypeSetList; lst = TailtOilTypeSetList(lst)) {
        elem = HeadtOilTypeSetList(lst);
        DAPTO_RESULT_PTR(elem);
    }
}

end;
~}

~O~<tOilTypeSetPtrList.tcl~>~{
set n(tOilTypeSetList,desc) "tOilTypeSet List"

proc n_tOilTypeSetList_open {text lst} {
    n_say "$text\n"
    if {$lst == 0} {
        n_say "  NULLtOilTypeSetList\n"
    } else {
        set lst [n_hextodec $lst]
        set r [n_send get_tOilTypeSetList_elems $lst]
        set c 0
        foreach i $r {
            n_say "  "
            n_say_val tOilTypeSet $i
            n_say "\n"
            incr c
        }
        if {$c == 0} {
            n_say "  Empty\n"
        }
    }
}

proc n_tOilTypeSetList_say {lst} {
    n_say "tOilTypeSetList:0x[n_dectohex $lst]"
}
~}
