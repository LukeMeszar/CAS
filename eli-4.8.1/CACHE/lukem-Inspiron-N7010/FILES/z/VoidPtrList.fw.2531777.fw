@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: List.fw,v 3.11 1999/11/17 14:22:59 uwe Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements linear lists whose elements are of type VoidPtr.
The list type is VoidPtrList.

This header file defines all of the exported operations of the module.
It must be included in any C file that refers to those operations.

~O~<VoidPtrList.specs~>~{
$/Adt/obstack.specs
#define EMPTYVoidPtrHDR
#ifdef EMPTYHDR
$/Adt/FunctionTypes.gnrc +instance=VoidPtr :inst
#else
$/Adt/FunctionTypes.gnrc +instance=VoidPtr +referto=VoidPtr :inst
#endif
#undef EMPTYVoidPtrHDR
$/Input/err.specs
~}

~O~<VoidPtrList.h~>~{
#ifndef _VoidPtrLIST_H
#define _VoidPtrLIST_H

/* include header file defining VoidPtr if VoidPtr is set: */
#define EMPTYVoidPtrHDR
#ifndef EMPTYHDR
#include "VoidPtr.h"
#endif
#undef EMPTYVoidPtrHDR

#include "VoidPtrFunctionTypes.h"

typedef struct _VoidPtrLE *VoidPtrList;
typedef VoidPtrList    *VoidPtrListPtr;

struct _VoidPtrLE {
VoidPtr		head;
VoidPtrList	tail;
};

#define NULLVoidPtrList		((VoidPtrList)0)
#define NullVoidPtrList()	((VoidPtrList)0)
#define SingleVoidPtrList(e)	(ConsVoidPtrList((e),NULLVoidPtrList))

#if defined(__STDC__) || defined(__cplusplus)

extern void FinlVoidPtrList(void);
   /* Deallocates all VoidPtrLists. */
   /* Dynamic storage is allocated on first need */

extern VoidPtrList ConsVoidPtrList (VoidPtr e, VoidPtrList l);
   /* Constructs a VoidPtrList of an element e and a given tail l.
    * e is the first element of the list. */

extern VoidPtr HeadVoidPtrList (VoidPtrList l);
   /* Returns the first element of the list l.
    * The list l must not be empty. */

extern VoidPtrList TailVoidPtrList (VoidPtrList l);
   /* Returns the tail of the list l.
    * If l is empty, an empty list is returned. */

extern int LengthVoidPtrList (VoidPtrList l);
   /* Returns the number of elements in the list l. */

extern VoidPtr IthElemVoidPtrList (VoidPtrList l, int i);
   /* Returns the i-th element of the List l. The head of l
    * is referred to as 1. If the value of
    * i is greater than the length of the list, an error
    * is reported and the program exits.
    */

extern VoidPtrList CopyVoidPtrList (VoidPtrList l, VoidPtrMapFct cp);
   /* Copies the list l. Elements are copied by calls of cp. */

extern VoidPtrList AppVoidPtrList (VoidPtrList l1, VoidPtrList l2);
   /* Concatenates two lists l1 and l2. The resulting list contains l2 at
    * the end of a copy of list l1. */

extern VoidPtrList AppElVoidPtrList (VoidPtrList l, VoidPtr e);
   /* Appends an element e to the list l.
    * The list l is not copied, it is modified as a side-effect
    * of this function. */

extern void InsertAfterVoidPtrList (VoidPtrList l, VoidPtr e);
   /* This function requires a non-empty list l. The element e is inserted
    * just after the first element of l. 
    * The list l is modified as a side-effect of this function. */

extern VoidPtrList OrderedInsertVoidPtrList (VoidPtrList l, VoidPtr e, VoidPtrCmpFctType fcmp);
   /* Inserts the element e into the list l maintaining l in
    * ascending order with respect to the compare fcmp. 
    * The list l is modified as a side-effect of this function. */

extern VoidPtrListPtr RefEndConsVoidPtrList (VoidPtrListPtr addr, VoidPtr e);
   /* Appends an element e to the end of a list given by its address addr.
    * The address where the next element may be appended is returned.
    * The list is modified as a side-effect of this function. */

extern VoidPtrListPtr RefEndAppVoidPtrList (VoidPtrListPtr addr, VoidPtrList l);
   /* Appends a list l to the end of a list given by its address addr.
    * The address where the next element may be appended is returned.
    * The list is modified as a side-effect of this function. */

extern int ElemInVoidPtrList (VoidPtr e, VoidPtrList l, VoidPtrCmpFctType cmpfct);
   /* This function returns true (1) iff the element e is in the List l.
    * List elements are compared by the function cmpfct. */

extern VoidPtrList AddToSetVoidPtrList (VoidPtr e, VoidPtrList l, VoidPtrCmpFctType cmpfct);
   /* A list is returned that has e as an element.
    * l is checked whether it already contains e using the compare
    * function cmpfct. */

extern VoidPtrList AddToOrderedSetVoidPtrList 
       (VoidPtr e, VoidPtrList l, VoidPtrCmpFctType cmpfct);
   /* A list is returned that has e as an element.
    * l is checked whether it already contains e using the compare
    * function cmpfct. l is assumed to be ordered increasingly in the sense of
    * cmpfct. */

extern VoidPtrList MapVoidPtrList (VoidPtrList l, VoidPtrMapFct f);
   /* Returns a new VoidPtrList obtained by applying f to each element of l. */

extern int CompVoidPtrList (VoidPtrList l1, VoidPtrList l2, VoidPtrCmpFctType f);
   /* Compares the lists l1 and l2 lexicographically by applying f
    * to the corresponding elements. */

extern VoidPtr SumVoidPtrList (VoidPtrList l, VoidPtrSumFct f, VoidPtr a);
   /* Applies the binary function f to the elements of the List:
    *   f( f(... f(a, e1), e2, ...), en)
    * If l is empty a is returned. */

#else

extern void FinlVoidPtrList ();
extern VoidPtrList ConsVoidPtrList ();
extern VoidPtr HeadVoidPtrList ();
extern VoidPtrList TailVoidPtrList ();
extern int LengthVoidPtrList ();
extern VoidPtr IthElemVoidPtrList ();
extern VoidPtrList CopyVoidPtrList ();
extern VoidPtrList AppVoidPtrList ();
extern VoidPtrList AppElVoidPtrList ();
extern void InsertAfterVoidPtrList ();
extern VoidPtrList OrderedInsertVoidPtrList ();
extern VoidPtrListPtr RefEndConsVoidPtrList ();
extern VoidPtrListPtr RefEndAppVoidPtrList ();
extern int ElemInVoidPtrList ();
extern VoidPtrList AddToSetVoidPtrList ();
extern VoidPtrList MapVoidPtrList ();
extern int CompVoidPtrList ();
extern VoidPtr SumVoidPtrList ();

#endif

#ifdef MONITOR
#define DAPTO_RESULTVoidPtrList(l) DAPTO_RESULT_PTR(l)
#define DAPTO_ARGVoidPtrList(l)    DAPTO_ARG_PTR (l, VoidPtrList)
#endif

#endif
~}

This file implements the operations on lists.
It will be added to the set of components of the generated program
automatically.

~O~<VoidPtrList.c~>~{

#include "VoidPtrList.h"
#include "err.h"
#include "obstack.h"

typedef struct {
  Obstack space;
  void *baseptr;
} Dyn, *DynP;

static DynP VoidPtrListSpace = (DynP)0;

#if defined(__STDC__) || defined(__cplusplus)
void FinlVoidPtrList (void)
#else
void FinlVoidPtrList ()
#endif
{
    if (VoidPtrListSpace != (DynP)0)
    {  obstack_free(&(VoidPtrListSpace->space), VoidPtrListSpace->baseptr);
       VoidPtrListSpace->baseptr = obstack_alloc(&(VoidPtrListSpace->space), 0);
    }
}/* FinlVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList ConsVoidPtrList (VoidPtr e, VoidPtrList l)
#else
VoidPtrList ConsVoidPtrList (e, l)
	VoidPtr	e;
	VoidPtrList	l;
#endif
{
    VoidPtrList	h;

    if (VoidPtrListSpace == (DynP)0)
    {	VoidPtrListSpace = (DynP) malloc (sizeof(Dyn));
	if (VoidPtrListSpace == (DynP)0)
	{  message (DEADLY, "no space for VoidPtrList", 0, (POSITION*)0);
	   exit (1);
	}
	obstack_init(&(VoidPtrListSpace->space));
	VoidPtrListSpace->baseptr =
		obstack_alloc(&(VoidPtrListSpace->space), 0);
    }

    h = (VoidPtrList)obstack_alloc(&(VoidPtrListSpace->space),
    				  sizeof (struct _VoidPtrLE));
    h->head = e;
    h->tail= l;
    return (h);
}/* ConsVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtr HeadVoidPtrList (VoidPtrList l)
#else
VoidPtr HeadVoidPtrList (l)
	VoidPtrList	l;
#endif
{
    if (l == NULLVoidPtrList)
    {
	message (DEADLY, "HeadVoidPtrList: empty list", 0, (POSITION*)0);
	/* return ((VoidPtr)0); */
    } /* if */
    return (l->head);
}/* HeadVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList TailVoidPtrList (VoidPtrList l)
#else
VoidPtrList TailVoidPtrList (l)
	VoidPtrList	l;
#endif
{
    return ((l==NULLVoidPtrList) ? NULLVoidPtrList : l->tail);
}/* TailVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
int LengthVoidPtrList (VoidPtrList l)
#else
int LengthVoidPtrList (l)
	VoidPtrList	l;
#endif
{
    int	res = 0;

    for (; l; l = l->tail)
	res++;
    return (res);
}/* LengthVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtr IthElemVoidPtrList (VoidPtrList l, int i)
#else
VoidPtr IthElemVoidPtrList (l, i)
	VoidPtrList	l;
	int	i;
#endif
{
    while ((i>1) && l)
    {
	i--;
	l = l->tail;
    }

    if ((i<=0) || (l==NULLVoidPtrList))
	message (DEADLY, "IthElemVoidPtrList: no such element",
		 0, (POSITION*)0);
    return (l->head);
}/* IthVoidPtrList */


#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList CopyVoidPtrList (VoidPtrList l, VoidPtrMapFct cp)
#else
VoidPtrList CopyVoidPtrList (l, cp)
	VoidPtrList l;
	VoidPtrMapFct	cp;
#endif
{
    VoidPtrList NewList=NULLVoidPtrList, *addr = &NewList;

    while (l)
    {
	(*addr) = ConsVoidPtrList (cp (l->head), NULLVoidPtrList);
	addr = &((*addr)->tail);
	l = l->tail;
    }
    return (NewList);
}/* CopyVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList AppVoidPtrList (VoidPtrList l1, VoidPtrList l2)
#else
VoidPtrList AppVoidPtrList (l1, l2)
	VoidPtrList	l1, l2;
#endif
{
    VoidPtrList	NewList;
    VoidPtrList	*addr = &NewList;

    if (!l1) return (l2);
    if (!l2) return (l1);

    while (l1) {
	(*addr) = ConsVoidPtrList (l1->head, NULLVoidPtrList);
	addr = &((*addr)->tail);
	l1 = l1->tail;
    }
    (*addr) = l2;

    return (NewList);
}/* AppVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList AppElVoidPtrList (VoidPtrList l, VoidPtr e)
#else
VoidPtrList AppElVoidPtrList (l, e)
	VoidPtrList	l;
	VoidPtr	e;
#endif
{
    VoidPtrList	res = l;
    if (!l)
	return (ConsVoidPtrList (e, NULLVoidPtrList));

    while (l->tail)
	l = l->tail;
    l->tail = ConsVoidPtrList (e, NULLVoidPtrList);

    return (res);
} /* AppElVoidPtrList */


#if defined(__STDC__) || defined(__cplusplus)
void InsertAfterVoidPtrList (VoidPtrList l, VoidPtr e)
#else
void InsertAfterVoidPtrList (l, e)
	VoidPtrList	l;
	VoidPtr	e;
#endif
{
    if (!l)
	message (DEADLY, "InsertAfterVoidPtrList: null list", 0, (POSITION*)0);
    else
	l->tail = ConsVoidPtrList (e, l->tail);
}/* InsertAfterVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList OrderedInsertVoidPtrList (VoidPtrList l, VoidPtr e, VoidPtrCmpFctType fcmp)
#else
VoidPtrList OrderedInsertVoidPtrList (l, e, fcmp)
	VoidPtrList	l;
	VoidPtr	e;
	VoidPtrCmpFctType fcmp;
#endif
{
    VoidPtrList	p;
    if (!l)
	return (ConsVoidPtrList (e, NULLVoidPtrList));
    if (fcmp (e, l->head) <= 0)
	return (ConsVoidPtrList (e, l));
    p = l;
    while (p->tail && (fcmp (e, p->tail->head) > 0))
	p = p->tail;
    p->tail = ConsVoidPtrList (e, p->tail);
    return (l);
}/* OrderedInsertVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrListPtr RefEndConsVoidPtrList (VoidPtrListPtr addr, VoidPtr e)
#else
VoidPtrListPtr RefEndConsVoidPtrList (addr, e)
	VoidPtrListPtr	addr;
	VoidPtr		e;
#endif
{
    if (!addr)
    {
	message (DEADLY, "RefEndConsVoidPtrList: no VoidPtrList ref",
		 0, (POSITION*)0);
	return (addr);
    }
    (*addr) = ConsVoidPtrList (e, NULLVoidPtrList);
    return (&((*addr)->tail));
}/* RefEndConsVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrListPtr RefEndAppVoidPtrList (VoidPtrListPtr addr, VoidPtrList l)
#else
VoidPtrListPtr RefEndAppVoidPtrList (addr, l)
	VoidPtrListPtr	addr;
	VoidPtrList		l;
#endif
{
    if (!addr) {
	message (DEADLY, "RefEndAppVoidPtrList: no VoidPtrList ref",
		 0, (POSITION*)0);
	return (addr);
    }
    if (!l)
	return addr;

    (*addr) = l;

    while (l->tail)
	l = l->tail;
    return (&(l->tail));
}/* RefEndAppVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
int ElemInVoidPtrList (VoidPtr e, VoidPtrList l, VoidPtrCmpFctType fcmp)
#else
int ElemInVoidPtrList (e, l, fcmp)
	VoidPtr	e;
	VoidPtrList	l;
	VoidPtrCmpFctType	fcmp;
#endif
{
    while (l != NULLVoidPtrList) {
	if (fcmp (e, l->head) == 0)
	    return (1);
	l = l->tail;
    }
    return (0);
}/* ElemInVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList AddToSetVoidPtrList (VoidPtr e, VoidPtrList l, VoidPtrCmpFctType fcmp)
#else
VoidPtrList AddToSetVoidPtrList (e, l, fcmp)
	VoidPtr	e;
	VoidPtrList	l;
	VoidPtrCmpFctType	fcmp;
#endif
{
    if (ElemInVoidPtrList (e, l, fcmp))
	return (l);
    else
	return (ConsVoidPtrList (e, l));
}/* AddToSetVoidPtrList */


#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList AddToOrderedSetVoidPtrList (VoidPtr e, VoidPtrList l, VoidPtrCmpFctType fcmp)
#else
VoidPtrList AddToOrderedSetVoidPtrList (e, l, fcmp)
        VoidPtr  e;
        VoidPtrList      l;
        VoidPtrCmpFctType fcmp;
#endif
{   int test;
    VoidPtrList  p;
    if (!l)
        return (ConsVoidPtrList (e, NULLVoidPtrList));
    if ((test = fcmp (e, l->head)) < 0)
        return (ConsVoidPtrList (e, l));
    if (test == 0) return l;
    p = l;
    while (p->tail && ((test = fcmp (e, p->tail->head)) > 0))
        p = p->tail;
    if (test) p->tail = ConsVoidPtrList (e, p->tail);
    return (l);
}/* AddToOrderedSetVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtrList MapVoidPtrList (VoidPtrList l, VoidPtrMapFct f)
#else
VoidPtrList MapVoidPtrList (l, f)
	VoidPtrList	l;
        VoidPtrMapFct f;
#endif
{
    VoidPtrList NewList = NULLVoidPtrList;
    VoidPtrList last = NULLVoidPtrList;

    while (l)
    {
	if (!NewList) {
	    NewList = ConsVoidPtrList ((f (l->head)), NULLVoidPtrList);
	    last = NewList;
	}
	else
	{
	    last->tail = ConsVoidPtrList ((f (l->head)), NULLVoidPtrList);
	    last = last->tail;
	}
	l = l->tail;
    }
    return (NewList);
}/* MapVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
int CompVoidPtrList (VoidPtrList l1, VoidPtrList l2, VoidPtrCmpFctType fcmp)
#else
int CompVoidPtrList (l1, l2, fcmp)
	VoidPtrList	l1, l2;
	VoidPtrCmpFctType fcmp;
#endif
{
    int	res = 0;
    while (l1 && l2 && (res == 0)) {
	res = (fcmp (l1->head, l2->head));
	l1 = l1->tail;
	l2 = l2->tail;
    }
    if (l1 && !l2)
	return (1);
    if (!l1 && l2)
	return (-1);
    return (res);
}/* CompVoidPtrList */

#if defined(__STDC__) || defined(__cplusplus)
VoidPtr SumVoidPtrList (VoidPtrList l, VoidPtrSumFct f, VoidPtr a)
#else
VoidPtr SumVoidPtrList (l, f, a)
	VoidPtrList	l;
	VoidPtr ((*f) ());
	VoidPtr	a;
#endif
{
    while (l) {
	a = (f (a, l->head));
	l = l->tail;
    }
    return (a);
}/* SumVoidPtrList */
~}

~O~<VoidPtrList.head~>~{
#include "VoidPtrList.h"
~}

~O~<VoidPtrList.dapto~>~{
aspect VoidPtrList;

"VoidPtrList.h"

operation get_VoidPtrList_elems
    "Return the VoidPtr list elements"
    (VoidPtrList lst "The list") : str
{
    VoidPtr elem;

    for ( ; lst != NULLVoidPtrList; lst = TailVoidPtrList(lst)) {
	elem = HeadVoidPtrList(lst);
	DAPTO_RESULT_PTR(elem);
    }
}

end;
~}

~O~<VoidPtrList.tcl~>~{
set n(VoidPtrList,desc) "VoidPtr List"

proc n_VoidPtrList_open {text lst} {
    n_say "$text\n"
    if {$lst == 0} {
        n_say "  NULLVoidPtrList\n"
    } else {
        set lst [n_hextodec $lst]
        set r [n_send get_VoidPtrList_elems $lst]
        set c 0
        foreach i $r {
            n_say "  "
            n_say_val VoidPtr $i
            n_say "\n"
            incr c
        }
        if {$c == 0} {
            n_say "  Empty\n"
        }
    }
}

proc n_VoidPtrList_say {lst} {
    n_say "VoidPtrList:0x[n_dectohex $lst]"
}
~}
