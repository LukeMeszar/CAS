@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: CScope.fw,v 5.3 2001/07/24 15:41:17 uwe Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!


This module implements consistent renaming of identifiers.
Identifier occurrences are bound to object keys of type DefTableKey
according to C-like scope rules:

A binding is valid from the definition upto the end of the smallest 
range containing the definition, except in inner ranges 
from a definition of the same identifier to the end of that range.

A binding is to be understood as a triple (idn, env, k) such that
the identifier idn is bound to the key k in the innermost scope
of the environment env. This module establishes bindings
for defining identifier occurrences and searches bindings for
used identifier occurrences. The results of these operations
are provided as attributes of symbols which represent identifier
occurrences. There is always a pair of such attributes, one
of type Binding, that allows to access the triple information,
and one of type DefTableKey, that is the key component of the
triple. 
(The latter is kept for backward compatibility and
for convenience of use. The describing text below refers only
to the key attribute, it does not mention explicitly that
a binding attribute comes along with it.)

This module is instantiated generically.
If identifiers are to be bound in different name spaces that do not
affect each other, then several instantiations of this module
are to be used.

On instantiation an optional
instance parameter may be supplied. Its value is preceeded to names
used in this module in order to allow several instances of the
module to coincide in one specification. If this text is obtained
from an instantiation the instance parameter is the string enclosed
in the following brackets [Type]. In order to see which names
are affected by the instance parameter you may look at the non-instantiated
module.

On instantiation an optional
referto parameter may be supplied. Its value is preceeded to
Key attribute names in order to allow one symbol representing an
identifier occurrence to be bound in different name spaces.
If that is not the case the referto parameter should not be set
to simplify the use of other library modules that depend on
Key attributes.
If this text is obtained
from an instantiation the referto parameter is the string enclosed
in the following brackets [].

This module provides the following computational roles:

~O~<TypeCScope.lido~>~{
~<TypeRootScope~>
~<TypeRangeScope~>
~<TypeAnyScope~>
~<TypeIdDefScope~>
~<TypeIdUseEnv~>
~<TypeIdUseScope~>
~<TypeIdDefUse~>
~<TypeChkIdUse~>
~<TypeDeclaratorWithId~>
~<TypeIdInDeclarator~>
~}

Usage Overview:

TypeRootScope is inherited to the grammar root by default.
The other SYMBOLs
may be used depending on the particular scope rule to be specified.

The main results of using this module are the bindings of
identifier occurrences represented by the attibutes
TypeIdDefScope.Key, TypeIdUseEnv.Key, and
TypeIdUseScope.Key.
TypeChkIdUse may be used to issue a message if the is no such binding.

Usually both TypeIdDefScope and TypeIdUseEnv are used.
In specific cases of language rules any combination of
TypeIdDefScope, TypeIdUseEnv, TypeIdUseScope
may be used.

The attributes TypeIdDefScope.Sym, TypeIdUseEnv.Sym,
TypeIdUseScope.Sym must represent the identifier encoding.

The Computational Roles:

TypeRootScope is the root symbol containing all identifier occurrences
and all TypeRangeScope.

SYNT.TypeEnv is a fresh root environment where all environments
of this name space are embedded in.
It has the value of a global variable TypeRootEnv that is assigned
in the initialization phase of the processor.
It allows to introduce predefinitions by initialization code.

SYNT.TypeGotKeys indicates that all identifier occurrences
are bound.

~$~<TypeRootScope~>==~{
CLASS SYMBOL ROOTCLASS INHERITS TypeRootScope END;

CHAIN _C_TypeGotKeys: VOID;

CLASS SYMBOL TypeRootScope:
	TypeEnv:	Environment	SYNT,	/* provided */
	TypeGotKeys:		VOID	SYNT;	/* provided */

CLASS SYMBOL TypeRootScope COMPUTE
  SYNT.TypeEnv = TypeRootEnv;
  CHAINSTART HEAD._C_TypeGotKeys = SYNT.TypeEnv;
  SYNT.TypeGotKeys = TAIL._C_TypeGotKeys;
END;
~}

TypeRangeScope
is a symbol representing a range for the binding
of defining identifier occurrences TypeIdDefScope.
It may be nested in TypeRootScope or other ranges.

INH.TypeEnv
is an environment of bindings.
It may be overridden by an upper computation to get one environment
for several TypeRangeScope forming one conceptual range.
If INH.TypeEnv is overridden, the computation of INH.TypeGotKeys must
be overridden accordingly by an upper computation.

SYNT.TypeGotKeys
indicates that all identifer ocurrences from the beginning of the
TypeRootScope up to the end of this range are bound to keys.

~$~<TypeRangeScope~>==~{
CLASS SYMBOL TypeRangeScope:
	TypeEnv:	Environment	INH,	/* provided */
	TypeGotKeys:		VOID	SYNT;	/* provided */

CLASS SYMBOL TypeRangeScope COMPUTE
  INH.TypeEnv = 
	NewScope (INCLUDING TypeAnyScope.TypeEnv);
  SYNT.TypeGotKeys = TAIL._C_TypeGotKeys;
END;
~}

TypeAnyScope 
comprises the roles of TypeRootScope and TypeRangeScope.
It may be used in constructs like INCLUDING TypeAnyScope.GotKeys.

~$~<TypeAnyScope~>==~{
CLASS SYMBOL TypeAnyScope END;
CLASS SYMBOL TypeRootScope	INHERITS TypeAnyScope END;
CLASS SYMBOL TypeRangeScope	INHERITS TypeAnyScope END;
~}

TypeIdDefScope
is a defining identifier occurrence THIS.Sym that is to be defined
in the scope of the immediately enclosing TypeAnyScope.

~$~<TypeIdDefScope~>==~{
CLASS SYMBOL TypeIdDefScope:
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	Sym:		int;			/* required */

CLASS SYMBOL TypeIdDefScope COMPUTE
  SYNT.Bind =
	BindIdn (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym)
	<- THIS._C_TypeGotKeys;
  SYNT.Key = KeyOf (SYNT.Bind);
  THIS._C_TypeGotKeys = SYNT.Key;
END;
~}

TypeIdUseEnv 
is an applied identifier occurrence THIS.Sym that is to be
bound in the scope of the immediately enclosing TypeAnyScope.

~$~<TypeIdUseEnv~>==~{
CLASS SYMBOL TypeIdUseEnv:
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	Sym:		int;			/* required */

CLASS SYMBOL TypeIdUseEnv INHERITS _TypeInhPrecondDefault COMPUTE
  SYNT.Bind =
	BindingInEnv (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym)
	<- (THIS._C_TypeGotKeys, SYNT._TypeInhPrecond);
  SYNT.Key = KeyOf (SYNT.Bind);
  THIS._C_TypeGotKeys = SYNT.Key;
END;

CLASS SYMBOL _TypeInhPrecondDefault:
	_TypeInhPrecond:	VOID	SYNT;   /* local */
CLASS SYMBOL _TypeInhPrecondDefault COMPUTE
  SYNT._TypeInhPrecond = "yes";
END;
~}

TypeIdUseScope
is a symbol representing an applied identifier occurrence
THIS.Sym that is to be bound in the scope of the
smallest enclosing range. Enclosing environments are not considered.

~$~<TypeIdUseScope~>==~{
CLASS SYMBOL TypeIdUseScope:
	Sym:		int,			/* required */
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT;	/* provided */

CLASS SYMBOL TypeIdUseScope INHERITS _TypeInhPrecondDefault COMPUTE
  SYNT.Bind =
	BindingInScope (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym)
	<- (THIS._C_TypeGotKeys, SYNT._TypeInhPrecond);
  SYNT.Key = KeyOf (SYNT.Bind);
  THIS._C_TypeGotKeys = SYNT.Key;
END;
~}

TypeIdDefUse
represents a defining identifier occurrence
like TypeIdDefScope if INH.TypeDefCond is non-zero,
otherwise an applied occurrence like TypeIdUseEnv.
By default INH.TypeDefCond is 1 if there is no binding
for this identifier in the current environment.
INH.TypeDefCond can be overridden by an upper computation.

~$~<TypeIdDefUse~>==~{
CLASS SYMBOL TypeIdDefUse:
	Sym:		int,			/* required */
	TypeDefCond:	int		INH,	/* default */
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	_TypeauxGotKeys: VOID		SYNT;	/* internal */

CLASS SYMBOL TypeIdDefUse INHERITS _TypeInhPrecondDefault COMPUTE
  SYNT._TypeauxGotKeys = THIS._C_TypeGotKeys;
  INH.TypeDefCond =
	EQ (NoBinding, 
	    BindingInEnv (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym))
	<- (THIS._TypeauxGotKeys, SYNT._TypeInhPrecond);
  SYNT.Bind =
	IF (THIS.TypeDefCond,
	BindIdn (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym),
	BindingInEnv (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym))
	<- (THIS._C_TypeGotKeys, SYNT._TypeInhPrecond);
  SYNT.Key = KeyOf (SYNT.Bind);
  THIS._C_TypeGotKeys = SYNT.Key;
END;
~}

TypeChkIdUse
may be used for any applied identifier occurrence to issue an error
message if no binding is found.

~$~<TypeChkIdUse~>==~{
CLASS SYMBOL TypeChkIdUse:
        Key:       DefTableKey     SYNT,   /* required */
        Sym:            int,                    /* required */
        SymErr:         int             SYNT,   /* provided */
        SymMsg:         VOID            SYNT;   /* provided */

CLASS SYMBOL TypeChkIdUse COMPUTE
  SYNT.SymErr = EQ (THIS.Key, NoKey);
  SYNT.SymMsg = IF (THIS.SymErr,
    message (ERROR, CatStrInd ("Identifier is not defined: ", THIS.Sym),
           0, COORDREF));
END;
~}

TypeDeclaratorWithId
is a construct that contains exactly one defining identifier occurrence 
represented by the role TypeIdInDeclarator.
The identifier is bound in the scope of the immediately enclosing 
TypeAnyScope. The binding becomes valid immediately after the end of
this construct.

~$~<TypeDeclaratorWithId~>==~{
CLASS SYMBOL TypeDeclaratorWithId:
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	Sym:		int		SYNT;	/* provided */

CLASS SYMBOL TypeDeclaratorWithId COMPUTE
  SYNT.Sym = CONSTITUENT TypeIdInDeclarator.Sym SHIELD TypeDeclaratorWithId;
  SYNT.Bind =
	BindIdn (INCLUDING TypeAnyScope.TypeEnv, THIS.Sym)
	<- TAIL._C_TypeGotKeys;
  SYNT.Key = KeyOf (SYNT.Bind);
  THIS._C_TypeGotKeys = SYNT.Key;
END;
~}

TypeIdInDeclarator
is a defining identifier occurrence THIS.Sym that is contained in
a TypeDeclaratorWithId construct.

~$~<TypeIdInDeclarator~>==~{
CLASS SYMBOL TypeIdInDeclarator:
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	Sym:		int;			/* required */

CLASS SYMBOL TypeIdInDeclarator COMPUTE
  SYNT.Bind = INCLUDING TypeDeclaratorWithId.Bind;
  SYNT.Key = KeyOf (SYNT.Bind);
END;
~}

The following C module provides the variable TypeRootEnv, which may be
used for initialization of bindings in the root environment,
as done by the predefinition modules.

~O~<TypeCScope.head~>~{
#include "TypeCScope.h"
#include "err.h"
~}

~O~<TypeCScope.h~>~{
#include "envmod.h"
extern Environment TypeRootEnv;
~}

~O~<TypeCScope.c~>~{
#include "TypeCScope.h"
Environment TypeRootEnv = NoEnv;
~}

~O~<TypeCScope.init~>~{
if (TypeRootEnv == NoEnv) TypeRootEnv = NewEnv ();
~}

~O~<TypeCScope.specs~>~{
$/Name/envmod.specs
$/Input/err.specs
$/Tech/Strings.specs
~}

