

CHAIN incls, entries, funcs, sigs : PTGNode;

RULE:
    spec ::= aspects
COMPUTE
    CHAINSTART HEAD.incls = PTGNULL;
    CHAINSTART HEAD.entries = PTGNULL;
    CHAINSTART HEAD.funcs = PTGNULL;
    PTGOutFile (cfilename, PTGcfile (PTGAsIs (basefilename), TAIL.funcs,
                                     TAIL.entries));
    CHAINSTART HEAD.sigs = PTGNULL;
    PTGOutFile (hfilename, PTGhfile (PTGAsIs (basefilename), TAIL.sigs,
                                     TAIL.incls));
END;

CHAIN incls : PTGNode;

RULE:
    sig ::= bstr
COMPUTE
    sig.incls = PTGSeq (sig.incls, PTGincl (PTGId (bstr)));
END;

RULE:
    sig ::= str
COMPUTE
    sig.incls = PTGSeq (sig.incls, PTGincl (PTGId (str)));
END;

CHAIN entries : PTGNode;
ATTR Sym : int;
ATTR idcode : CharPtr;

SYMBOL ptg_ident
COMPUTE
    SYNT.idcode = StringTable (THIS.Sym);
END;

SYMBOL iddef INHERITS ptg_ident END;
SYMBOL iduse INHERITS ptg_ident END;
SYMBOL typeid INHERITS ptg_ident END;

RULE:
    operation_sig ::= 'operation' iddef str operation_block body
COMPUTE
    operation_sig.entries = PTGSeq (operation_sig.entries,
                                    PTGentry (iddef.idcode));
END;

RULE:
    operation_sig ::= 'operation' iddef str operation_block ':' typeid body
COMPUTE
    operation_sig.entries = PTGSeq (operation_sig.entries,
                                    PTGentry (iddef.idcode));
END;

CHAIN funcs, names, argvars, args : PTGNode;
CHAIN argcount : int;

ATTR line : int;
ATTR bodycode : PTGNode;

RULE: body ::= text COMPUTE
    body.line = LINE;
    body.bodycode = PTGId (text);
END;

RULE:
    operation_sig ::= 'operation' iddef str operation_block body
COMPUTE
    
    CHAINSTART operation_block.args = PTGNULL;
    CHAINSTART operation_block.argvars = PTGNULL;
    CHAINSTART operation_block.names = PTGNULL;
    operation_sig.funcs = PTGSeq (operation_sig.funcs,
                              PTGcmdfunc (iddef.idcode,
                                          operation_block.argvars,
                                          IF (EQ (operation_block.argcount, 0),
                                              PTGNULL,
                                              operation_block.args),
                                          body.bodycode,
                                          body.line,
                                          filename));
    
END;

RULE:
    operation_sig ::= 'operation' iddef str operation_block ':' typeid body
COMPUTE
    
    CHAINSTART operation_block.args = PTGNULL;
    CHAINSTART operation_block.argvars = PTGNULL;
    CHAINSTART operation_block.names = PTGNULL;
    operation_sig.funcs = PTGSeq (operation_sig.funcs,
                              PTGcmdfunc (iddef.idcode,
                                          operation_block.argvars,
                                          IF (EQ (operation_block.argcount, 0),
                                              PTGNULL,
                                              operation_block.args),
                                          body.bodycode,
                                          body.line,
                                          filename));
    
END;

CHAIN names, argvars, args : PTGNode;

RULE:
    param ::= typeid iddef str
COMPUTE
    param.names = PTGNSeq (param.names, Getamp (typeid.Key, "&"),
                           iddef.idcode);
    param.args = PTGSeq (param.args,
                         PTGarg (Getsend (typeid.Key,
                                          StringTable (typeid.Sym)),
                                 iddef.idcode));
    param.argvars = PTGSSeq (param.argvars,
                             PTGDecl (Gettype (typeid.Key, typeid.idcode),
                                      iddef.idcode));
END;

CHAIN funcs, sigs, args, ansiargs, types, ansitypes, sends : PTGNode;
ATTR translations, translationvars : PTGNode;

RULE:
    event_sig ::= 'event' iddef export str event_block ';'
COMPUTE
    CHAINSTART event_block.args = PTGNULL;
    CHAINSTART event_block.ansiargs = PTGNULL;
    CHAINSTART event_block.types = PTGNULL;
    CHAINSTART event_block.ansitypes = PTGNULL;
    CHAINSTART event_block.sends = PTGNULL;

    event_sig.funcs = PTGSeq (event_sig.funcs,
                              PTGefunc (event_sig.translationvars,
                                        iddef.idcode,
                                        event_block.ansiargs,
                                        event_block.args,
                                        event_block.types,
                                        event_block.sends));
    event_sig.sigs = PTGSeq (event_sig.sigs,
                             PTGsig (iddef.idcode, event_block.ansitypes));
END;


CHAIN args, types, ansitypes : PTGNode;
ATTR cast, type, arg : PTGNode;

RULE:
    attr ::= typeid iddef str
COMPUTE
    .cast = Getcast (typeid.Key, PTGAsIs ("(long)"));
    attr.args = IF (EQ (attr.args, PTGNULL),
                    PTGAsIs (iddef.idcode),
                    PTGCommaSeq (attr.args, PTGAsIs (iddef.idcode)));
    .type = PTGAsIs (Gettype (typeid.Key, typeid.idcode));
    .arg = PTGSSeq (.type, PTGAsIs (iddef.idcode));
    attr.ansiargs = IF (EQ (attr.args, PTGNULL), .arg,
                        PTGCommaSeq (attr.ansiargs, .arg));
    attr.types = PTGDeclSeq (attr.types, .arg);
    attr.ansitypes = IF (EQ (attr.args, PTGNULL), .type,
                         PTGCommaSeq (attr.ansitypes, .type));
    attr.sends = PTGSeq (attr.sends,
                         PTGsend (Getsend (typeid.Key, 
                                           StringTable (typeid.Sym)),
                                  iddef.idcode));
END;

ATTR translationsset : VOID;
ATTR translations, translationvars : PTGNode;
ATTR Key : DefTableKey;

RULE:
    spec ::= aspects
COMPUTE
    spec.translationsset = CONSTITUENTS translation_sig.translationsset;
END;

RULE:
    event_sig ::= 'event' iddef export str event_block ';'
COMPUTE
    event_sig.translations = GetTranslations (iddef.Key, PTGNULL)
                             DEPENDS_ON INCLUDING spec.translationsset;
    event_sig.translationvars = GetTranslationVars (iddef.Key, PTGNULL)
                                DEPENDS_ON INCLUDING spec.translationsset;
END;

RULE:
    translation_sig ::= 'translation' iddef iduse str body
COMPUTE
    .translations = PTGSeq (GetTranslations (iduse.Key, PTGNULL),
                            PTGtranslation (iddef.idcode,
                                            body.line,
                                            filename,
                                            body.bodycode));
    .translationvars = PTGSeq (GetTranslationVars (iduse.Key, PTGNULL),
                               PTGtranslationvar (iddef.idcode));
    translation_sig.translationsset =
        ORDER (SetTranslations (iduse.Key, .translations, .translations),
               SetTranslationVars (iduse.Key, .translationvars,
                                   .translationvars));
END;

