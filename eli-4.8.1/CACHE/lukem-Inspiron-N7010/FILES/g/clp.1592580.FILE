This is Info file clp, produced by Makeinfo-1.43 from the input file
/home/lukem/Dropbox/CAS/eli-4.8.1/Eli/pkg/clp/clp.tnf.


File: clp,  Node: top,  Next: Command line interface,  Prev: (dir),  Up: (dir)

   $Revision: 1.27 $

   A processor generated by Eli may need to interact with its
environment by way of the command line that invokes it.  This manual
describes the default behaviour and how you can perform more
sophisticated command line processing.  We will refer to Eli's command
line processing support as *CLP*.

* Menu:

* Command line interface::      What is a command line interface?
* Default behaviour::           What happens in the default case?
* Specification::               Specifying the command line interface
* Accessing::                   Accessing the command line
* Grammar::                     Complete Grammar Listing
* Index::                       Index for this manual

 -- The Detailed Node Listing --

Specifying the command line interface

* Command line format::         The general format of the command line
* Boolean options::             Options that are either there or not
* Value options::               Options that have a value given with them
* Joined value options::        Options that are joined to their values
* Multiple option strings::     Multiple option strings for the same option
* Ordering options::            The order of option specification lines
* Usage options::               Options that affect usage messages
* Termination::                 Terminating the option list
* Positional parameters::       Parameters given by their command line position
* Input parameters::            Parameters used for input files
* Documentation::               Documentation options and parameters

Accessing the command line

* Boolean option access::       Accessing boolean options
* Integer value options::       Accessing options with integer values
* String value options::        Accessing options with string values
* Repeated options::            Accessing options that appear more than once
* Positional parameter access::	Accessing positional parameters
* Input parameter access::	Accessing input parameters
* Reporting open errors::	Reporting open errors


File: clp,  Node: Command line interface,  Next: Default behaviour,  Prev: top,  Up: top

What is a command line interface?
*********************************

   When a processor is invoked it will be from an interactive or batch
shell of some kind.  A command line will be used to specify the name
of the processor and any inputs that it needs.  A few typical Unix
command lines are:

     cc -o fred.exe fred.c
     vi fred.c
     rlogin prep.ai.mit.edu -l rms

   Note that a pipe command such as:

     format doc.troff | lpr -Plaser

consists of two command lines because two programs are invoked.

   In these examples various options are given to some of the tools
via the command line.  For example, `-o fred.exe' specifies that the
output file of the C compilation should be called `fred.exe' rather
than the default `a.out'.  A major part of the job of a command line
interface is to provide mechanisms for specifying which options are
legal and allowing the processor to find out which ones the user
actually supplied.

   Other information can be provided on the command line in the form of
POSITIONAL PARAMETERS.  For example, `fred.c' in the first two
examples and `prep.ai.mit.edu' in the last are positional parameters. 
A command line interface is also responsible for providing access to
positional parameters.

   Unix provides access to the components of the command line for C
programs via the `argc' and `argv' parameters to the `main' function. 
The facility described in this manual uses those parameters to provide
higher-level access.


File: clp,  Node: Default behaviour,  Next: Specification,  Prev: Command line interface,  Up: top

What happens by default?
************************

   The default command line interface provided by Eli assumes that the
generated processor will have one input file and no options.

   A processor `proc' generated with the default command line
interface can be invoked in the following ways:

`proc'
     NO OPTIONS OR INPUT FILES.  Input is assumed to come from standard
     input.

`proc' INPUT
     NO OPTIONS, ONE INPUT FILE.  Input comes from INPUT.

ANY OTHER WAY
     Signalled as an error.

   The default behaviour is achieved using the following command line
specification:

     InputFile input "File to be processed";

*note Specification::., for details on the specification language.


File: clp,  Node: Specification,  Next: Accessing,  Prev: Default behaviour,  Up: top

Specifying the command line interface
*************************************

   If the default behaviour is not sufficient you can alter the command
line interface using a file whose extension is `.clp'.  The following
sections show how to specify the varieties of options that the
interface may need to handle.

* Menu:

* Command line format::         The general format of the command line
* Boolean options::             Options that are either there or not
* Value options::               Options that have a value given with them
* Joined value options::        Options that are joined to their values
* Multiple option strings::     Multiple option strings for the same option
* Ordering options::            The order of option specification lines
* Usage options::               Options that affect usage messages
* Termination::                 Terminating the option list
* Positional parameters::       Parameters given by their command line position
* Input parameters::            Parameters used for input files
* Documentation::               Documentation options and parameters


File: clp,  Node: Command line format,  Next: Boolean options,  Prev: Specification,  Up: Specification

The general format of the command line
======================================

   The general format of a command line that can be recognised using a
`.clp' specification is:

  1. The program name, followed by

  2. An arbitrary number of options, followed by

  3. An arbitrary number of positional parameters.

   A `.clp' specification describes the legal options and positional
parameters.

   If the `.clp' specification is empty the effect is to prohibit all
options and positional parameters.  A processor generated in this
manner must get its input from standard input.


File: clp,  Node: Boolean options,  Next: Value options,  Prev: Command line format,  Up: Specification

Options that are either there or not
====================================

   A boolean option is something like the `-S' (produce assembly code)
or `-c' (compile only, don't link) options for the standard Unix
compilers.  That is, the option string is all that is needed.

   A specification line of the form:

     NAME STRING `boolean' `;'

describes a boolean option called NAME which is indicated by the
command line string STRING.  For example:

     GenAssembly "-S" boolean;
     CompileOnly "-c" boolean;

describe the compiler options mentioned above.

   If a boolean option can appear more than once on the command line
you should use the keyword `booleans' instead of `boolean'.  Thus, the
specification line:

     WideListing "-w" booleans;

says that the user can give as many `-w' options as they like.  For
example, the processor can check the number provided and produce a
listing of the appropriate width.  (See the Berkeley Unix `ps'
command.)


File: clp,  Node: Value options,  Next: Joined value options,  Prev: Boolean options,  Up: Specification

Options that have a value given with them
=========================================

   Some options need values.  CLP supports two types of values: strings
and integers.  Typical options of these types would be the `-o'
(generate output in the specified file) option of a Unix compiler, or
the `-#' (print this many copies) option of a line printing program.

   A specification line of the form:

     NAME STRING TYPE `;'

describes a value option called NAME which is indicated by the command
line string STRING and accepts values of the specified type separated
from the indication by whitespace.  The valid types are `int', `ints',
`string' and `strings'.  The plural versions denote value options that
may appear more than once on the command line.

   For example:

     OutputFile "-o" string;
     NumCopies "-#" int;

describes the options mentioned above and

     Command "-e" strings;

describes a repeatable option (see the Unix command `sed', for
example).


File: clp,  Node: Joined value options,  Next: Multiple option strings,  Prev: Value options,  Up: Specification

Options that are joined to their values
=======================================

   Value options as described in the previous section are separated
from their values by white space.  If this is not desired, JOINED value
options can be used and no white space will be expected.  Examples of
joined value options are `-' which is used by the Unix `head' program
to designate how many lines to print (eg. `head -42 file'), and
`-temp=' which is used by some compilers to describe where to put
temporary files (eg. `pc -temp=/usr/tmp file.p').

   To describe a joined value option, use the specification line as
described in the previous section with the keyword `joinedto' before
the type specifier.

   For example, the following specification lines describe the options
mentioned above:

     TmpFile "-temp=" joinedto string;
     NumLines "-" joinedto int;

   Joined value options can be repeated in the same way as normal value
options.  For example,

     MacroPackage "-m" joinedto strings;

   In some cases it is desirable to allow the option to be joined to
its value or to be separated from its value by whitespace.  To specify
this behaviour the keyword `with' can be used before the type
specifier.  `with' can also be used with repeated options of both
integer and string type.

   For example, the following specification line describes an option
`-x' for which both of the following uses would be legal:

     -x42 -x 42

     Exit "-x" with int;


File: clp,  Node: Multiple option strings,  Next: Ordering options,  Prev: Joined value options,  Up: Specification

Multiple option strings for the same option
===========================================

   The previous three sections have described options with associated
values.  In some cases it is useful to be able to invoke these options
with more than one string on the command line.  To specify this kind of
behaviour just list all of the option strings instead of just one.

   For example, the following specification line says that the printing
option can be invoked with any of the following: `-p', `+pr', or
`--print'.

     Print "-p" "+pr" "--print" boolean "Print the output";


File: clp,  Node: Ordering options,  Next: Usage options,  Prev: Multiple option strings,  Up: Specification

The order of option specification lines
=======================================

   Care must be taken when writing a CLP specification to ensure that
the specification lines are ordered correctly.  When processing the
command line, CLP looks for options in the order that you specify
them.  A problem can occur if some option indication is a prefix of
another option indication specified later.

   For example, the code generated from the specification:

     ModuleOption "-m" joinedto string;
     ManOption "-man" string;

will never recognize the `-man' option because `ModuleOption' will be
tested for first.  Putting the specification of `ManOption' first will
fix the problem.


File: clp,  Node: Usage options,  Next: Termination,  Prev: Ordering options,  Up: Specification

Options that affect usage messages
==================================

   CLP will automatically arrange for the usage message to be displayed
when an erroneous condition is discovered.  Sometimes it is nice to be
able to implement an option that the user can use on purpose to get the
usage message.

   A specification line of the form:

     `usage' STRING `;'

declares STRING to be such an option.  Multiple usage options are
allowed.

   If a usage option is specified on the command line by the user when
running the generated processor, the usage message is displayed and
execution is terminated.  All other options and/or parameters are
ignored.

   A report can be sent to the standard error stream if the program
detects some error in opening a file specified on the command line. 
To send the report, the program calls `ClpOpenError' with two arguments
(*note Reporting open errors::.).

   The text of the report is defined by writing a description of the
form:

     `open' `error' `format' STRING `;'

STRING defines the text, and may contain escape sequences of the form
`%C' that are replaced before the report is output:

`%f'
     Replaced by the first argument of the `ClpFileError' call
     (usually the name of the file that could not be opened).

`%t'
     Replaced by the second argument of the `ClpFileError' call
     (usually a string describing the system error).

`%p'
     Replaced by the name of the program being executed.

`%%'
     Replaced by a single `%'.

`%C'
     Where `C' is not `f', `p', `t', or `%', replaced by nothing.

   A CLP specification may contain an arbitrary number of report
definitions, but only the last one encountered will be used.  CLP
assumes that every specification begins with the following report
definition:

     open error format "%p cannot open %f: %t";

   Sometimes it is useful to print the usage message when a file
cannot be opened.  For example, cases like this occur when the user
mistypes an option which is then interpreted as a filename.  By
default, the usage message is not printed when a file cannot be
opened.  To cause it to be printed, use a specification line of the
form:

     `open' `error' `usage' `;'


File: clp,  Node: Termination,  Next: Positional parameters,  Prev: Usage options,  Up: Specification

Terminating the option list
===========================

   For many processors it is useful to allow the user some way of
saying that a command line string that looks like an option isn't
really one.  For example, this situation may arise when using the Unix
`rm' command.  If a user wants to remove a file called `-r' they would
rather not have the filename interpreted as an option to recursively
delete subdirectories.

   One way of coping with this is to allow the user to type a special
command line string that causes option recognition to terminate.  For
example, a user could type:

     rm -i -- -r

to interactively (`-i') delete a file called `-r'.

   The termination facility of CLP lets you specify which string (or
strings) should cause this behaviour.  A specification line of the
form:

     `terminator' STRING `;'

declares STRING to be such a string.  Multiple terminator
specifications are allowed.

   To get the behaviour described above for `rm' the following would
be used:

     terminator "--";


File: clp,  Node: Positional parameters,  Next: Input parameters,  Prev: Termination,  Up: Specification

Parameters given by their command line position
===============================================

   Parameters that are interpreted according to their position on the
command line are called POSITIONAL PARAMETERS.  For example, when
invoking a remote login program the remote machine name may be given
as a positional parameter.

   A specification line of the form:

     NAME `positional' `;'

describes a situation where a positional parameter is to be recognized
and called NAME.

   The plural form:

     NAME `positionals' `;'

can be used if a group of positional parameters is to be handled and
grouped together.

   Multiple positional parameters can be recognized by giving multiple
specification lines of these kinds.  Parameters will be recognized in
the order that they are specified.  If a plural form is present, it
should be the last positional parameter specification line because it
will represent all of the positional parameters from that point on. 
In that case, the processor generated will accept varying numbers of
parameters.  If no plural form is given, the processor will accept a
fixed number of parameters equal to the number of singular positional
parameter specification lines.


File: clp,  Node: Input parameters,  Next: Documentation,  Prev: Positional parameters,  Up: Specification

Input parameters
================

   An input parameter is a special case of a positional parameter. 
Its value must be a file name, and that file will replace standard
input as the primary source of data for the program.  An error will be
reported if the named file cannot be opened for input.  Only one input
parameter may be specified.

   A specification line of the form:

     NAME `input' `;'

describes a situation where a positional parameter is to be recognized,
called NAME, and used as the primary source of data for the program.

   If an input parameter is specified, but the user does not provide a
value for it on the command line, then standard input is used as the
primary source of data for the program.

   If no input parameter is specified then the processor will not be
able to get input from a file (unless otherwise programmed using
positional parameters).  Standard input will be used as the primary
source of data for the program.


File: clp,  Node: Documentation,  Prev: Input parameters,  Up: Specification

Documentation options and parameters
====================================

   If the user specifies things incorrectly on the command line the
usual practice is to produce a usage message and terminate execution
of the processor.  CLP will automatically produce a usage message in
this fashion.  It is possible to attach descriptions to the option and
parameter specification lines to make this usage message more helpful
to the user.

   Each of the types of specification lines described above (except
those for termination of option processing) can have a documentation
string.  Typical examples are:

     CompileOnly "-c" boolean "Just compile, don't link";
     MacroPackage "-m" joinedto strings "Load this macro package";
     FileName input "File to be processed";
     Others positionals "Other positional parameters";


File: clp,  Node: Accessing,  Next: Grammar,  Prev: Specification,  Up: top

Accessing the command line
**************************

   A CLP specification is turned into code that arranges for command
line information to be stored in C variables or a simple database. 
This code is automatically run by the processor startup code generated
by Eli.  During attribution of a structure tree you can access the
variables or use access functions to obtain the command-line
information.

   The header file `clp.h' will contain `extern' declarations for all
values defined by the CLP-generated code.  It should be included
wherever these values must be accessed.

* Menu:

* Boolean option access::       Accessing boolean options
* Integer value options::       Accessing options with integer values
* String value options::        Accessing options with string values
* Repeated options::            Accessing options that appear more than once
* Positional parameter access::	Accessing positional parameters
* Input parameter access::	Accessing input parameters
* Reporting open errors::	Reporting open errors


File: clp,  Node: Boolean option access,  Next: Integer value options,  Prev: Accessing,  Up: Accessing

Accessing boolean options
=========================

   Since boolean options do not have value information associated with
them, all that is needed to represent them is a simple flag rather than
a database object.  We store the flag as a C integer variable whose
name is the option name.

   For example, given the specification:

     GenAssembly "-S" boolean;

CLP will generate a variable called `GenAssembly'.  Typical C code to
test for this option would look like:

     if (GenAssembly)
       printf ("GenAssembly specified\n");
     else
       printf ("GenAssembly not specified\n");


File: clp,  Node: Integer value options,  Next: String value options,  Prev: Boolean option access,  Up: Accessing

Accessing options with integer values
=====================================

   To provide access to integer value options, CLP generates a database
object which has the appropriate value as a property.  The object is
referred to by a key-valued variable named after the option.  For
example, given the specification:

     NumCopies "-#" int;

CLP will generate a variable called `NumCopies'.  The value of the
variable can be used to access the option value using the `GetClpValue'
property access function.

     printf ("NumCopies value is %d\n", GetClpValue (NumCopies, 0));

Here `0' will be printed if the option was not specified by the user.

   Alternatively, presence of the option can be tested for explicitly
by testing the key:

     if (NumCopies == NoKey)
       printf ("NumCopies not specified\n");
     else
       printf ("NumCopies value is %d\n", GetClpValue (NumCopies, 0));

In this case the default value parameter in the `GetClpValue' call
will never be used.


File: clp,  Node: String value options,  Next: Repeated options,  Prev: Integer value options,  Up: Accessing

Accessing options with string values
====================================

   Access to string value options is provided via a database object
which has the appropriate value as a property.  The object is referred
to by a key-value variable named after the option.  For example, given
the specification:

     TmpFile "-temp=" joinedto string;

CLP will generate a variable called `TmpFile'.  `GetClpValue' is used
to obtain the value which should be interpreted as a string table
index (*note Arbitrary-length character strings: (lib)storage.).

     #include "csm.h"
     
     if (TmpFile == NoKey)
       printf ("TmpFile not specified\n");
     else
       printf ("TmpFile value is '%s'\n", StringTable (GetClpValue (TmpFile, 0)));


File: clp,  Node: Repeated options,  Next: Positional parameter access,  Prev: String value options,  Up: Accessing

Accessing options that appear more than once
============================================

   The mechanisms described in the previous three sections only apply
to options that can appear at most once on the command line.  More
complicated mechanisms are needed to access values associated with
repeated options.

   CLP uses linked lists of definition table keys to provide multiple
value access.  The lists are implemented using Eli's `List' module. 
*Note list: (adt)list.

   Given the specification:

     MacroPackage "-m" joinedto strings;

the list module lets you print the multiple values (via keys) as
follows:

     #include "csm.h"
     #include "clp.h"
     
     DefTableKey printkey (DefTableKey k)
     {
         printf ("%s", StringTable (GetClpValue (k, 0)));
     }
     
     (void) MapDefTableKeyList (MacroPackage, printkey);

   Boolean repeated options are an exception to this list approach. 
Since no value is associated with the option there is little point in
having a list of keys.  For this reason, boolean repeated options are
implemented as a single integer whose value is the number of times the
option appeared.


File: clp,  Node: Positional parameter access,  Next: Input parameter access,  Prev: Repeated options,  Up: Accessing

Accessing positional parameters
===============================

   For each singular positional parameter specification line CLP
generates a variable of the appropriate name holding the key to a
database object that has the string value of the positional parameter
as a property.  The value can be accessed as for string value options
(*note String value options::.).

   CLP will always make sure that a positional parameter is specified
and will arrange for a usage message to be printed otherwise.  Thus
there is no need to test that the database object described in the
previous paragraph is defined.  For example, given the specification
line:

     FileName positional;

the following code can be used to print the specified value:

     #include "csm.h"
     
     printf ("Filename given was '%s'\n", StringTable (GetClpValue (FileName, 0)));

   When a plural positional parameter specification line is given the
mechanisms used for repeated option values are used (*note Repeated
options::.).  For example, if a processor can take multiple input
files a specification like the following might be used:

     FileNames positionals;

The following code can be used to print these parameters *Note Linear
Lists of Any Type: (adt)List.

     #include "csm.h"
     #include "clp.h"
     
     DefTableKey printkey (DefTableKey k)
     {
         printf ("%s", StringTable (GetClpValue (k, 0)));
     }
     
     (void) MapDefTableKeyList (FileNames, printkey);


File: clp,  Node: Input parameter access,  Next: Reporting open errors,  Prev: Positional parameter access,  Up: Accessing

Accessing input parameters
==========================

   Since an input parameter is just a special kind of positional
parameter, its value (which is the name of the input file) can be
accessed as shown in *Note Accessing positional parameters: Positional
parameter access.

   The input parameter may also be accessed via the standard name
`CLP_InputFile'.


File: clp,  Node: Reporting open errors,  Prev: Input parameter access,  Up: Accessing

Reporting open errors
=====================

   CLP defines the text of an error report that a program can write to
standard error when a file cannot be opened (*note Usage options::.). 
The program writes this error report by invoking the `ClpOpenError'
routine:

     void ClpOpenError(const char *filename, const char *errtext)
     /* On entry-
      *   filename points to the string to replace any %f escape in the report
      *   errtext points to the string to replace any %t escape in the report
      * On exit-
      *   The modified report has been written to stderr
      */

   Although the role of the argument strings is completely arbitrary,
the usual practice is to use the name of the file being opened as the
value of `filename' and the string corresponding to the system error
as the value of `errtext'.  Here is a code fragment illustrating the
typical usage:

     #include <errno.h>
     #include <string.h>
     ...
       int infile = open(infilename, 0);
       if (infile == -1) {
         ClpOpenError(infilename, strerror(errno));
         exit(2);
       }
     ...


File: clp,  Node: Grammar,  Next: Index,  Prev: Accessing,  Up: top

Complete Grammar Listing
************************

   The following is the complete input grammar for the facilities
described in this manual.

     CLP_SPEC ::= PARAMS .
     
     PARAMS ::= / PARAMS PARAM `;' .
     
     PARAM ::=
        IDENTIFIER STRINGS TYPE DOC /
        IDENTIFIER STRINGS `joinedto' VALTYPE DOC /
        IDENTIFIER STRINGS `with' VALTYPE DOC /
        `usage' STRING / `terminator' STRING /
        `open' `error' `format' STRING /
        `open' `error' `usage' .
     
     TYPE ::= `boolean' / `booleans' / `positional' /
        `positionals' / VALTYPE .
     
     VALTYPE ::= `int' / `ints' / `string' / `strings' .
     
     DOC ::= / STRING .
     
     STRINGS ::= STRING / STRINGS STRING .


File: clp,  Node: Index,  Prev: Grammar,  Up: top

Index
*****

* Menu:

* .clp:                                 Command line format.
* .clp:                                 Specification.
* CLP_InputFile:                        Input parameter access.
* ClpOpenError:                         Reporting open errors.
* ClpOpenError:                         Usage options.
* DefTableKeyList:                      Repeated options.
* GetClpValue:                          String value options.
* GetClpValue:                          Integer value options.
* NoKey:                                Integer value options.
* StringTable:                          String value options.
* argc:                                 Command line interface.
* argv:                                 Command line interface.
* boolean:                              Boolean options.
* boolean option:                       Boolean options.
* boolean options repeated:             Repeated options.
* booleans:                             Boolean options.
* command line:                         Command line interface.
* command line format:                  Command line format.
* default interface:                    Default behaviour.
* documentation:                        Documentation.
* empty specification:                  Command line format.
* error format:                         Usage options.
* general format:                       Command line format.
* grammar listing:                      Grammar.
* input:                                Input parameters.
* input file:                           Default behaviour.
* input parameter:                      Input parameter access.
* input parameter:                      Input parameters.
* int:                                  Value options.
* integer values:                       Value options.
* ints:                                 Value options.
* joined value options:                 Joined value options.
* joinedto:                             Joined value options.
* linked list:                          Repeated options.
* multiple option strings:              Multiple option strings.
* open error format:                    Usage options.
* open error usage:                     Usage options.
* order of option specification lines:  Ordering options.
* order of specification lines:         Positional parameters.
* positional:                           Positional parameters.
* positional parameters:                Positional parameters.
* positional parameters:                Command line interface.
* positionals:                          Positional parameters.
* prefixes:                             Ordering options.
* repeated boolean options:             Repeated options.
* repeated options:                     Repeated options.
* repeated options:                     Joined value options.
* repeated options:                     Value options.
* repeated options:                     Boolean options.
* standard input:                       Input parameters.
* standard input:                       Command line format.
* standard input:                       Default behaviour.
* stopping option recognition:          Termination.
* string:                               Value options.
* string table:                         String value options.
* string values:                        Value options.
* strings:                              Value options.
* termination string:                   Termination.
* terminator:                           Termination.
* usage message:                        Positional parameter access.
* usage message:                        Documentation.
* usage message:                        Usage options.
* value options:                        Value options.
* whitespace:                           Value options.
* with:                                 Joined value options.



Tag Table:
Node: top126
Node: Command line interface2227
Node: Default behaviour3791
Node: Specification4595
Node: Command line format5781
Node: Boolean options6468
Node: Value options7541
Node: Joined value options8623
Node: Multiple option strings10203
Node: Ordering options10902
Node: Usage options11701
Node: Termination13995
Node: Positional parameters15125
Node: Input parameters16444
Node: Documentation17514
Node: Accessing18424
Node: Boolean option access19534
Node: Integer value options20237
Node: String value options21342
Node: Repeated options22194
Node: Positional parameter access23462
Node: Input parameter access25052
Node: Reporting open errors25538
Node: Grammar26727
Node: Index27529

End Tag Table
