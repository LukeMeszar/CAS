@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: AlgScope.fw,v 5.2 1997/08/29 12:08:20 mjung Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements consistent renaming of identifiers.
Identifier occurrences are bound to object keys of type DefTableKey
according to Algol-like scope rules:

A binding is valid within the whole smallest range containing
the definition, except in inner ranges where a binding for the
same identifier holds.

A binding is to be understood as a triple (idn, env, k) such that
the identifier idn is bound to the key k in the innermost scope
of the environment env. This module establishes bindings
for defining identifier occurrences and searches bindings for
used identifier occurrences. The results of these operations
are provided as attributes of symbols which represent identifier
occurrences. There is always a pair of such attributes, one
of type Binding, that allows to access the triple information,
and one of type DefTableKey, that is the key component of the
triple. 
(The latter is kept for backward compatibility and
for convenience of use. The describing text below refers only
to the key attribute, it does not mention explicitly that
a binding attribute comes along with it.)

This module is instantiated generically.
If identifiers are to be bound in different name spaces that do not
affect each other, then several instantiations of this module
are to be used.

On instantiation an optional
instance parameter may be supplied. Its value is preceeded to names
used in this module in order to allow several instances of the
module to coincide in one specification. If this text is obtained
from an instantiation the instance parameter is the string enclosed
in the following brackets []. In order to see which names
are affected by the instance parameter you may look at the non-instantiated
module.

On instantiation an optional
referto parameter may be supplied. Its value is preceeded to
Key attribute names in order to allow one symbol representing an
identifier occurrence to be bound in different name spaces.
If that is not the case the referto parameter should not be set
to simplify the use of other library modules that depend on
Key attributes.
If this text is obtained
from an instantiation the referto parameter is the string enclosed
in the following brackets [].

This module provides the following computational roles:

~O~<AlgScope.lido~>~{
~<RootScope~>
~<RangeScope~>
~<AnyScope~>
~<IdDefScope~>
~<IdUseEnv~>
~<IdUseScope~>
~<ChkIdUse~>
~}

Usage Overview:

RootScope is inherited to the grammar root by default.
The other SYMBOLs
may be used depending on the particular scope rule to be specified.

The main results of using this module are the bindings of
identifier occurrences represented by the attibutes
IdDefScope.Key, IdUseEnv.Key, and
IdUseScope.Key.
ChkIdUse may be used to issue a message if the is no such binding.

Usually both IdDefScope and IdUseEnv are used.
In specific cases of language rules any combination of
IdDefScope, IdUseEnv, IdUseScope
may be used.

The attributes IdDefScope.Sym, IdUseEnv.Sym, 
IdUseScope.Sym must represent the identifier encoding.

The Computational Roles:

RootScope is the root symbol containing all identifier occurrences
and all RangeScope. 

SYNT.Env is a fresh root environment where all environments
of this name space are embedded in.
It has the value of a global variable RootEnv that is assigned
in the initialization phase of the processor.
It allows to introduce predefinitions by initialization code.

SYNT.GotKeys and SYNT.GotLocKeys
indicate that all keys defined in the root range are in SYNT.Env.

~$~<RootScope~>==~{
CLASS SYMBOL ROOTCLASS INHERITS RootScope END;

CLASS SYMBOL RootScope:
	Env:	Environment	SYNT,	/* provided */
	GotLocKeys:	VOID	SYNT,	/* provided */
	GotKeys:		VOID	SYNT;	/* provided */

CLASS SYMBOL RootScope COMPUTE
  SYNT.Env = RootEnv;
  SYNT.GotLocKeys =
	CONSTITUENTS IdDefScope.Key 
	SHIELD (RangeScope, RootScope);
  SYNT.GotKeys = SYNT.GotLocKeys;
END;
~}

RangeScope 
is a symbol representing a range for the binding
of defining identifier occurrences IdDefScope.
It may be nested in RootScope or other ranges.

INH.Env
is an environment of bindings.
It may be overridden by an upper computation to get one environment
for several RangeScope forming one conceptual range.
If INH.Env is overridden, the computation of INH.GotKeys must 
be overridden accordingly by an upper computation.

SYNT.GotLocKeys
indicates that all keys defined in this range (not regarding inner ranges)
are in INH.Env.

INH.GotKeys
indicates that all keys defined in this and in all enclosing
ranges are in INH.Env. It is a precondition for finding
a binding in IdUseEnv.

~$~<RangeScope~>==~{
CLASS SYMBOL RangeScope:
	Env:	Environment	INH,	/* provided */
	GotLocKeys:	VOID	SYNT,	/* provided */
	GotKeys:		VOID	INH;	/* provided */

CLASS SYMBOL RangeScope COMPUTE
  INH.Env =
  	NewScope (INCLUDING AnyScope.Env);
  SYNT.GotLocKeys =
	CONSTITUENTS IdDefScope.Key SHIELD AnyScope;
  INH.GotKeys =
	INCLUDING AnyScope.GotKeys
	<- SYNT.GotLocKeys;
END;
~}

AnyScope 
comprises the roles of RootScope and RangeScope.
It may be used in constructs like INCLUDING AnyScope.GotKeys.

~$~<AnyScope~>==~{
CLASS SYMBOL AnyScope END;
CLASS SYMBOL RootScope	INHERITS AnyScope END;
CLASS SYMBOL RangeScope	INHERITS AnyScope END;
~}

IdDefScope 
is a defining identifier occurrence THIS.Sym that is to be defined 
in the scope of the immediately enclosing AnyScope.

~$~<IdDefScope~>==~{
CLASS SYMBOL IdDefScope:
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	Sym:		int;			/* required */

CLASS SYMBOL IdDefScope COMPUTE
  SYNT.Bind =
	BindIdn (INCLUDING AnyScope.Env, THIS.Sym);
  SYNT.Key = KeyOf (SYNT.Bind);
END;
~}

IdUseEnv 
is an applied identifier occurrence THIS.Sym that is to be
bound in the scope of the immediately enclosing AnyScope.

~$~<IdUseEnv~>==~{
CLASS SYMBOL IdUseEnv:
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT,	/* provided */
	Sym:		int;			/* required */

CLASS SYMBOL IdUseEnv INHERITS _InhPrecondDefault COMPUTE
  SYNT.Bind =
	BindingInEnv (INCLUDING AnyScope.Env, THIS.Sym)
	<- (INCLUDING AnyScope.GotKeys,
	    SYNT._InhPrecond);
  SYNT.Key = KeyOf (SYNT.Bind);
END;

CLASS SYMBOL _InhPrecondDefault:
	_InhPrecond:	VOID	SYNT;	/* local */
CLASS SYMBOL _InhPrecondDefault COMPUTE
  SYNT._InhPrecond = "yes";
END;
~}

IdUseScope
is a symbol representing an applied identifier occurrence
THIS.Sym that is to be bound in the scope of the
smallest enclosing range. Enclosing environments are not considered.

~$~<IdUseScope~>==~{
CLASS SYMBOL IdUseScope:
	Sym:		int,			/* required */
	Bind:	Binding		SYNT,	/* provided */
	Key:	DefTableKey	SYNT;	/* provided */

CLASS SYMBOL IdUseScope INHERITS _InhPrecondDefault COMPUTE
  SYNT.Bind =
	BindingInScope (INCLUDING AnyScope.Env, THIS.Sym)
	<- (INCLUDING AnyScope.GotLocKeys,
	    SYNT._InhPrecond);
  SYNT.Key = KeyOf (SYNT.Bind);
END;
~}

ChkIdUse
may be used for any applied identifier occurrence to issue an error
message if no binding is found.

~$~<ChkIdUse~>==~{
CLASS SYMBOL ChkIdUse:
	Key:	DefTableKey	SYNT,	/* required */
	Sym:		int,			/* required */
	SymErr:		int		SYNT,	/* provided */
	SymMsg:		VOID		SYNT;	/* provided */

CLASS SYMBOL ChkIdUse COMPUTE
  SYNT.SymErr = EQ (THIS.Key, NoKey);
  SYNT.SymMsg = IF (THIS.SymErr,
    message (ERROR, CatStrInd ("Identifier is not defined: ", THIS.Sym),
           0, COORDREF));
END;
~}

The following C module provides the variable RootEnv, which may be
used for initialization of bindings in the root environment,
as done by the predefinition modules.

~O~<AlgScope.head~>~{
#include "AlgScope.h"
#include "err.h"
~}

~O~<AlgScope.h~>~{
#include "envmod.h"
extern Environment RootEnv;
~}

~O~<AlgScope.c~>~{
#include "AlgScope.h"
Environment RootEnv = NoEnv;
~}

~O~<AlgScope.init~>~{
if (RootEnv == NoEnv) RootEnv = NewEnv ();
~}

~O~<AlgScope.specs~>~{
$/Name/envmod.specs
$/Tech/Strings.specs
~}

