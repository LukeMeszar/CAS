# $Id: Odinfile,v 1.6 1997/08/29 12:29:43 mjung Exp peter $
# (C) Copyright 1997 University of Paderborn.
# 
# This file is part of the Eli Module Library.
# 
# The Eli Module Library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
# 
# The Eli Module Library is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
# 
# You should have received a copy of the GNU Library General Public
# License along with the Eli Module Library; see the file COPYING.LIB.
# If not, write to the Free Software Foundation, Inc., 59 Temple Place -
# Suite 330, Boston, MA 02111-1307, USA.
#

%filter_errors == <<EOF
s,/[^ ]*Examples,Examples,g
EOF

AlgLike.fw.exe == AlgLike.fw:exe
AlgLike.warn == AlgLike.fw:warning
%AlgLike ! == <<EOF
	AlgLike.fw.exe
	AlgLike.warn
EOF

%trenn == <<EOF
==============
EOF

%AlgLikeOk == <<EOF
%AlgLike.TEST == . +cmd=cat (%trenn) \
	(AlgLike.demo/TEST:label) \
	(AlgLike.demo/TEST) \
	(AlgLike.demo/TEST +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/TEST +cmd=(AlgLike.fw.exe) :stdout) :stdout
EOF

%AlgLikeErr == <<EOF
%AlgLike.TEST == . +cmd=cat (%trenn) \
	(AlgLike.demo/TEST:label) \
	(AlgLike.demo/TEST) \
	((AlgLike.demo/TEST +cmd=(AlgLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
EOF

%AlgLike.Core.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/Core.ok:label) \
	(AlgLike.demo/Core.ok) \
	(AlgLike.demo/Core.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/Core.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout
%AlgLike.Core.err == . +cmd=cat (%trenn) \
	(AlgLike.demo/Core.err:label) \
	(AlgLike.demo/Core.err) \
	((AlgLike.demo/Core.err +cmd=(AlgLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%AlgLike.Module.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/Module.ok:label) \
	(AlgLike.demo/Module.ok) \
	(AlgLike.demo/Module.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/Module.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout
%AlgLike.Module.err == . +cmd=cat (%trenn) \
	(AlgLike.demo/Module.err:label) \
	(AlgLike.demo/Module.err) \
	((AlgLike.demo/Module.err +cmd=(AlgLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%AlgLike.Predef.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/Predef.ok:label) \
	(AlgLike.demo/Predef.ok) \
	(AlgLike.demo/Predef.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/Predef.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout
%AlgLike.With.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/With.ok:label) \
	(AlgLike.demo/With.ok) \
	(AlgLike.demo/With.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/With.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout
%AlgLike.Class.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/Class.ok:label) \
	(AlgLike.demo/Class.ok) \
	(AlgLike.demo/Class.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/Class.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout
%AlgLike.Class.err == . +cmd=cat (%trenn) \
	(AlgLike.demo/Class.err:label) \
	(AlgLike.demo/Class.err) \
	((AlgLike.demo/Class.err +cmd=(AlgLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%AlgLike.ClassVar.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/ClassVar.ok:label) \
	(AlgLike.demo/ClassVar.ok) \
	(AlgLike.demo/ClassVar.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/ClassVar.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout
%AlgLike.Flat.ok == . +cmd=cat (%trenn) \
	(AlgLike.demo/Flat.ok:label) \
	(AlgLike.demo/Flat.ok) \
	(AlgLike.demo/Flat.ok +cmd=(AlgLike.fw.exe) :stdout :warn) \
	(AlgLike.demo/Flat.ok +cmd=(AlgLike.fw.exe) :stdout) :stdout

AlgLike.messages == . +cmd=cat \
	(%AlgLike.Core.ok) \
	(%AlgLike.Core.err) \
	(%AlgLike.Module.ok) \
	(%AlgLike.Module.err) \
	(%AlgLike.Predef.ok) \
	(%AlgLike.With.ok) \
	(%AlgLike.Class.ok) \
	(%AlgLike.Class.err) \
	(%AlgLike.ClassVar.ok) \
	(%AlgLike.Flat.ok) \
		:stdout

%AlgLike.test ! == <<EOF
	AlgLike.messages
	!diff AlgLike.messages AlgLike.savedmessages > AlgLike.diff || true
	AlgLike.diff >
EOF

%AlgLike.testsok ! == <<EOF
	AlgLike.messages > AlgLike.savedmessages
EOF

CLike.fw.exe == CLike.fw:exe
CLike.warn == CLike.fw:warning
%CLike ! == <<EOF
	CLike.fw.exe
	CLike.warn
EOF

%CLikeOk == <<EOF
%CLike.TEST == . +cmd=cat (%trenn) \
	(CLike.demo/TEST:label) \
	(CLike.demo/TEST) \
	(CLike.demo/TEST +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/TEST +cmd=(CLike.fw.exe) :stdout) :stdout
EOF

%CLikeErr == <<EOF
%CLike.TEST == . +cmd=cat (%trenn) \
	(CLike.demo/TEST:label) \
	(CLike.demo/TEST) \
	((CLike.demo/TEST +cmd=(CLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
EOF

%CLike.Core.ok == . +cmd=cat (%trenn) \
	(CLike.demo/Core.ok:label) \
	(CLike.demo/Core.ok) \
	(CLike.demo/Core.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/Core.ok +cmd=(CLike.fw.exe) :stdout) :stdout
%CLike.Core.err == . +cmd=cat (%trenn) \
	(CLike.demo/Core.err:label) \
	(CLike.demo/Core.err) \
	((CLike.demo/Core.err +cmd=(CLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%CLike.Module.ok == . +cmd=cat (%trenn) \
	(CLike.demo/Module.ok:label) \
	(CLike.demo/Module.ok) \
	(CLike.demo/Module.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/Module.ok +cmd=(CLike.fw.exe) :stdout) :stdout
%CLike.Module.err == . +cmd=cat (%trenn) \
	(CLike.demo/Module.err:label) \
	(CLike.demo/Module.err) \
	((CLike.demo/Module.err +cmd=(CLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%CLike.Predef.ok == . +cmd=cat (%trenn) \
	(CLike.demo/Predef.ok:label) \
	(CLike.demo/Predef.ok) \
	(CLike.demo/Predef.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/Predef.ok +cmd=(CLike.fw.exe) :stdout) :stdout
%CLike.With.ok == . +cmd=cat (%trenn) \
	(CLike.demo/With.ok:label) \
	(CLike.demo/With.ok) \
	(CLike.demo/With.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/With.ok +cmd=(CLike.fw.exe) :stdout) :stdout
%CLike.Class.ok == . +cmd=cat (%trenn) \
	(CLike.demo/Class.ok:label) \
	(CLike.demo/Class.ok) \
	(CLike.demo/Class.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/Class.ok +cmd=(CLike.fw.exe) :stdout) :stdout
%CLike.Class.err == . +cmd=cat (%trenn) \
	(CLike.demo/Class.err:label) \
	(CLike.demo/Class.err) \
	((CLike.demo/Class.err +cmd=(CLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%CLike.ClassVar.ok == . +cmd=cat (%trenn) \
	(CLike.demo/ClassVar.ok:label) \
	(CLike.demo/ClassVar.ok) \
	(CLike.demo/ClassVar.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/ClassVar.ok +cmd=(CLike.fw.exe) :stdout) :stdout
%CLike.Flat.ok == . +cmd=cat (%trenn) \
	(CLike.demo/Flat.ok:label) \
	(CLike.demo/Flat.ok) \
	(CLike.demo/Flat.ok +cmd=(CLike.fw.exe) :stdout :warn) \
	(CLike.demo/Flat.ok +cmd=(CLike.fw.exe) :stdout) :stdout

CLike.messages == . +cmd=cat \
	(%CLike.Core.ok) \
	(%CLike.Core.err) \
	(%CLike.Module.ok) \
	(%CLike.Module.err) \
	(%CLike.Predef.ok) \
	(%CLike.With.ok) \
	(%CLike.Class.ok) \
	(%CLike.Class.err) \
	(%CLike.ClassVar.ok) \
	(%CLike.Flat.ok) \
		:stdout


%CLike.test ! == <<EOF
	CLike.messages
	!diff CLike.messages CLike.savedmessages > CLike.diff || true
	CLike.diff >
EOF

%CLike.testsok ! == <<EOF
	CLike.messages > CLike.savedmessages
EOF

BuCLike.fw.exe == BuCLike.fw:exe
BuCLike.warn == BuCLike.fw:warning
%BuCLike ! == <<EOF
	BuCLike.fw.exe
	BuCLike.warn
EOF

%BuCLikeOk == <<EOF
%BuCLike.TEST == . +cmd=cat (%trenn) \
	(BuCLike.demo/TEST:label) \
	(BuCLike.demo/TEST) \
	(BuCLike.demo/TEST +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/TEST +cmd=(BuCLike.fw.exe) :stdout) :stdout
EOF

%BuCLikeErr == <<EOF
%BuCLike.TEST == . +cmd=cat (%trenn) \
	(BuCLike.demo/TEST:label) \
	(BuCLike.demo/TEST) \
	((BuCLike.demo/TEST +cmd=(BuCLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
EOF

%BuCLike.Core.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/Core.ok:label) \
	(BuCLike.demo/Core.ok) \
	(BuCLike.demo/Core.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/Core.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout
%BuCLike.Core.err == . +cmd=cat (%trenn) \
	(BuCLike.demo/Core.err:label) \
	(BuCLike.demo/Core.err) \
	((BuCLike.demo/Core.err +cmd=(BuCLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%BuCLike.Module.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/Module.ok:label) \
	(BuCLike.demo/Module.ok) \
	(BuCLike.demo/Module.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/Module.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout
%BuCLike.Module.err == . +cmd=cat (%trenn) \
	(BuCLike.demo/Module.err:label) \
	(BuCLike.demo/Module.err) \
	((BuCLike.demo/Module.err +cmd=(BuCLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%BuCLike.Predef.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/Predef.ok:label) \
	(BuCLike.demo/Predef.ok) \
	(BuCLike.demo/Predef.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/Predef.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout
%BuCLike.With.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/With.ok:label) \
	(BuCLike.demo/With.ok) \
	(BuCLike.demo/With.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/With.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout
%BuCLike.Class.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/Class.ok:label) \
	(BuCLike.demo/Class.ok) \
	(BuCLike.demo/Class.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/Class.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout
%BuCLike.Class.err == . +cmd=cat (%trenn) \
	(BuCLike.demo/Class.err:label) \
	(BuCLike.demo/Class.err) \
	((BuCLike.demo/Class.err +cmd=(BuCLike.fw.exe) :stdout :warn) +cmd=sed -f (%filter_errors) :stdout) :stdout
%BuCLike.ClassVar.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/ClassVar.ok:label) \
	(BuCLike.demo/ClassVar.ok) \
	(BuCLike.demo/ClassVar.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/ClassVar.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout
%BuCLike.Flat.ok == . +cmd=cat (%trenn) \
	(BuCLike.demo/Flat.ok:label) \
	(BuCLike.demo/Flat.ok) \
	(BuCLike.demo/Flat.ok +cmd=(BuCLike.fw.exe) :stdout :warn) \
	(BuCLike.demo/Flat.ok +cmd=(BuCLike.fw.exe) :stdout) :stdout

BuCLike.messages == . +cmd=cat \
	(%BuCLike.Core.ok) \
	(%BuCLike.Core.err) \
	(%BuCLike.Module.ok) \
	(%BuCLike.Module.err) \
	(%BuCLike.Predef.ok) \
	(%BuCLike.With.ok) \
	(%BuCLike.Class.ok) \
	(%BuCLike.Class.err) \
	(%BuCLike.ClassVar.ok) \
	(%BuCLike.Flat.ok) \
		:stdout

%BuCLike.test ! == <<EOF
	BuCLike.messages
   	!diff BuCLike.messages BuCLike.savedmessages > BuCLike.diff || true
	BuCLike.diff >    
EOF


%BuCLike.testsok ! == <<EOF
	BuCLike.messages > BuCLike.savedmessages
EOF

%all ! == <<EOF
	%AlgLike
	%CLike
	%BuCLike
EOF
	
%test ! == <<EOF
	%AlgLike.test
	%CLike.test
	%BuCLike.test
	! if test -s AlgLike.diff || test -s CLike.diff || test -s BuCLike.diff; then echo "*** diffs encountered."; exit 1; else echo "All tests passed without diffs."; fi
EOF

%helpmsg == <<EOF
Virtual targets, defined in the Odinfile manage processor generation and
testing. The following targets can be used:

AlgLike.fw.exe		Generates the Name-Examples that use
			the Algol Scoperule Modules
CLike.fw.exe		Generates the Name-Examples that use
			the C Scoperule Modules
BuCLike.fw.exe		Generates the Name-Examples that use
			the C Scoperule Modules designed for
			use in Bottomup Computations.

%all			Derives all of the three processors.

%AlgLike.test		Tests the AlgLike.fw.exe-Processor 
			after bringing it up to date.
%CLike.test		Tests the CLike.fw.exe-Processor 
			after bringing it up to date.
%BuCLike.fw.test	Tests the BuCLike.fw.exe-Processor
			after bringing it up to date.

%test			Tests all of the above processors.

Additionally, the targets %AlgLike.testsok, %CLike.testsok
and %BuCLike.testsok can be used to bring the compared test
output, used in the ...test-targets for verification, up
to date.
EOF

%help ! == <<EOF
	%helpmsg>
EOF
