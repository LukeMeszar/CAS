
file:   "#include <stdio.h>\n"
        "#include <stdlib.h>\n"
        "#include <string.h>\n"
        "#include \"clp.h\"\n"
        "#include \"clpintf.h\"\n"
        "#include \"pdl_gen.h\"\n"
        "#include \"csm.h\"\n"
        "#include \"eliproto.h\"\n"
        "\n"
        "#define TYPE_MASK      0x001F\n"
        "#define BOOL           0x0001\n"
        "#define INTVAL         0x0002\n"
        "#define STRVAL         0x0004\n"
        "#define USAGE          0x0008\n"
        "#define TERM           0x0010\n"
        "\n"
        "#define JOINED         0x0100\n"
        "#define SPACED         0x0200\n"
        "#define PLURAL         0x0400\n"
        "\n"
        "typedef struct opt opt;\n"
        "struct opt {\n"
        "    CONST char *str;\n"
        "    int flags;\n"
        "    int *count;\n"
        "    DefTableKey *key;\n"
        "    DefTableKeyList *list;\n"
        "};\n"
        "\n"
        "DefTableKey CLP_InputFile = NoKey;\n"
        $ /* decls */
        "static int error_count = 0;\n"
        "\n"
        "#define NUMOPTS " $ int "\n"
        "\n"
        "static opt opts[] = {\n"
        $ /* opts */
        "    { \"dummy\", 0, NULL, NULL, NULL }\n"
        "};\n"
        "\n"

        "static void\n"
        "#ifdef PROTO_OK\n"
        "clp_error (const char *str, const char *msg)\n"
        "#else\n"
        "clp_error (str, msg)\n"
        "char *str, *msg;\n"
        "#endif\n"
        "{\n"
        "  if (str == (char *) NULL)\n"
        "    fprintf (stderr, \"%s\\n\", msg);\n"
        "  else\n"
        "    fprintf (stderr, \"%s %s\\n\", str, msg);\n"
        "  error_count++;\n"
        "}\n"
        "\n"    

        "static int\n"
        "#ifdef PROTO_OK\n"
        "clp_atos (char *str)\n"
        "#else\n"
        "clp_atos (str)\n"
        "char *str;\n"
        "#endif\n"
        "{\n"
        "  return stostr (str, strlen(str));\n"
        "}\n"
        "\n"

        "void\n"
        "#ifdef PROTO_OK\n"
        "clp_usage (char *prog)\n"
        "#else\n"
        "clp_usage (prog)\n"
        "  char *prog;\n"
        "#endif\n"
        "{\n"
        "  fprintf (stderr, \"Usage: %s [options] parameters\\n\", prog);\n"
        "  fprintf (stderr, \"  Items marked with * may be repeated.\\n\");\n"
        "  fprintf (stderr, \"  Options:\\n\");\n"
        $ /* option uses */
        "  fprintf (stderr, \"  Parameters:\\n\");\n"
        $ /* parameter uses */
        "    exit (1);\n"
        "}\n"
        "\n"

        "void\n"
        "#ifdef PROTO_OK\n"
        "clp_init (int argc, char *argv[])\n"
        "#else\n"
        "clp_init (argc, argv)\n"
        "int argc;\n"
        "char *argv[];\n"
        "#endif\n"
        "{\n"
        "  int i, j, p, t;\n"
        "  DefTableKey k;\n"
        "  opt *o;\n"
        "  char *s;\n"
        "\n"
        "  SetFileErr (\"" $ "\", " $ int ");\n"
        "  for (i = 1; i < argc; i++) {\n"
        "    for (j = 0, o = opts; j < NUMOPTS; j++, o++)\n"
        "      if (strncmp (o->str, argv[i], strlen (o->str)) == 0)\n"
        "        break;\n"
        "    if (j == NUMOPTS)\n"
        "      break;\n"
        "    s = argv[i] + strlen (o->str);\n"
        "    if (o->flags & USAGE) {\n"
        "      if (*s != '\\0')\n"
        "        clp_error (o->str, \"must not have a value\");\n"
        "      clp_usage (argv[0]);\n"
        "    } else if (o->flags & TERM) {\n"
        "      if (*s != '\\0')\n"
        "        clp_error (o->str, \"must not have a value\");\n"
        "      i++;\n"
        "      break;\n"
        "    } else {\n"
        "      if (o->count != (int *) NULL)\n"
        "        (*o->count)++;\n"
        "      p = o->flags & PLURAL;\n"
        "      if ((!p) && (*o->count > 1))\n"
        "        clp_error (o->str, \"can only be given once\");\n"
        "      t = o->flags & TYPE_MASK;\n"
        "      switch (t) {\n"
        "        case BOOL:\n"
        "          if (*s != '\\0')\n"
        "            clp_error (o->str, \"must not have a value\");\n"
        "          break;\n"
        "        case INTVAL:\n"
        "        case STRVAL: {\n"
        "          if (o->flags & JOINED) {\n"
        "            if (*s == '\\0') {\n"
        "              if (o->flags & SPACED) {\n"
        "                if (i == argc - 1) {\n"
        "                  clp_error (o->str, \"must have a value\");\n"
        "                  continue;\n"
        "                } else {\n"
        "                  i++;\n"
        "                  s = argv[i];\n"
        "                }\n"
        "              } else {\n"
        "                clp_error (o->str, \"must have a joined value\");\n"
        "                continue;\n"
        "              }\n"
        "            }\n"
        "          } else if (o->flags & SPACED) {\n"
        "            if (*s != '\\0') {\n"
        "              clp_error (o->str, \"must not have a joined value\");\n"
        "              continue;\n"     
        "            }\n"
        "            if (i == argc - 1) {\n"
        "              clp_error (o->str, \"must have a value\");\n"
        "              continue;\n"
        "            } else {\n"
        "              i++;\n"
        "              s = argv[i];\n"
        "            }\n"
        "          }\n"
        "          if (p) {\n"
        "            DefTableKey k = NewKey ();\n"
        "            switch (t) {\n"
        "              case INTVAL:\n"
        "                SetClpValue (k, atoi (s), 0);\n"
        "                break;\n"
        "              case STRVAL:\n"
        "                SetClpValue (k, clp_atos (s), 0);\n"
        "                break;\n"
        "            }\n"
        "            *o->list = AppElDefTableKeyList (*o->list, k);\n"
        "          } else {\n"
        "            *o->key = NewKey ();\n"
        "            switch (t) {\n"
        "              case INTVAL:\n"
        "                SetClpValue (*o->key, atoi (s), 0);\n"
        "                break;\n"
        "              case STRVAL:\n"
        "                SetClpValue (*o->key, clp_atos (s), 0);\n"
        "                break;\n"
        "            }\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "    }\n"
        "  }\n"
        $ /* params, mparam */
        "  if ((i < argc) || (error_count > 0))\n"
        "    clp_usage (argv[0]);\n"
        "}\n"

kdecl:  "DefTableKey " [OutStr $1 int] " = NoKey;\n"
kkdecl: "DefTableKeyList " [OutStr $1 int] " = NULLDefTableKeyList;\n"
bdecl:  "int " [OutStr $1 int] " = 0;\n"
idecl:  "static int " [OutStr $1 int] "_count = 0;\n"

topt:   "    { \"" [OutStr $1 int] "\", TERM, NULL, NULL, NULL },\n"
lit:    "    { \"" [OutStr $1 int] "\", "
opt:    $1 string " " $2 string ", " $3 ", " $4 ", " $5 " },\n"

count:  "&" [OutStr $1 int] "_count"
var:    "&" [OutStr $1 int] 
none:   "NULL"

param:  "  if (i < argc) {\n"
        "    " [OutStr $1 int] " = NewKey ();\n"
        "    SetClpValue (" [OutStr $1 int] ", clp_string (argv[i++]), 0);\n"
        "  }\n"

mparam: "  for (; i < argc; i++) {\n"
        "    k = NewKey ();\n"
        "    SetClpValue (k, clp_string (argv[i]), 0);\n"
        "    " [OutStr $1 int] " = AppElDefTableKeyList ("
           [OutStr $1 int] ", k);\n"
        "  }\n"

input:  "  if (i < argc) {\n"
        "    " [OutStr $1 int] " = NewKey ();\n"
        "    SetClpValue (" [OutStr $1 int] ", clp_string (argv[i++]), 0);\n"
        "    CLP_InputFile = " [OutStr $1 int] ";\n"
        "  }\n"

use:    "  fprintf (stderr, \"    " $1 " " [OutStr $2 int] "\\n\");\n"
uses:   "  fprintf (stderr, \"    " $1 " " [OutStr $2 int] "*\\n\");\n"
tuse:   "  fprintf (stderr, \"    " $1 " Terminate options\\n\");\n"
vuse:   "  fprintf (stderr, \"    "
            [OutPSStr $1 int $2 string $3 string $4 int] " " $5 ");\n"
uuse:   "  fprintf (stderr, \"    " $1 " Display this usage message\\n\");\n"
msg:    [OutStr $1 int] $2 string "\\n\""

header: "#ifndef CLP_H\n"
        "\n"
        "#define CLP_H\n"
        "#include \"clplib.h\"\n"
        "#include \"pdl_gen.h\"\n"
        "#include \"DefTableKeyList.h\"\n"
        "\n"
        "extern DefTableKey CLP_InputFile;\n"
        "#ifdef PROTO_OK\n"
        "extern void clp_usage (char *);\n"
        "#else\n"
        "extern void clp_usage ();\n"
        "#endif\n"
        "\n"
        $ /* kextern or iextern */
        "\n"
        "#endif\n"

kextern:  "extern DefTableKey " [OutStr $ int] ";\n"
kkextern: "extern DefTableKeyList " [OutStr $ int] ";\n"
iextern:  "extern int " [OutStr $ int] ";\n"

seq:    $ $
seq3:   $ $ $ 

cstr:   $1 string
str:    [OutStr $1 int]
pstr:   [OutPStr $1 int $2 int]
