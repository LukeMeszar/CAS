switch( action ) {
	case (OFFSET+1) : _incrnodestack();_nst[_nsp]=MkMinusOp(&curpos); break;
	case (OFFSET+2) : _incrnodestack();_nst[_nsp]=MkPlusOp(&curpos); break;
	case (OFFSET+3) : _incrnodestack();_nst[_nsp]=MkAmpOp(&curpos); break;
	case (OFFSET+4) : _nst[_nsp]=Mkrule_1(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+5) : _incrnodestack();_nst[_nsp]=MkBarOp(&curpos); break;
	case (OFFSET+6) : _nsp -= 2;_nst[_nsp]=MkDyadicExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+7) : _nst[_nsp]=Mkrule_2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+8) : _nsp -= 1;_nst[_nsp]=Mkrule_3(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+9) : _nsp -= 2;_nst[_nsp]=MkCondExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+10) : _nsp -= 2;_nst[_nsp]=MkShortCircuitExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+11) : _nsp -= 2;_nst[_nsp]=MkShortCircuitExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+12) : _incrnodestack();_nst[_nsp]=MkEqualOp(&curpos); break;
	case (OFFSET+13) : _nsp -= 1;_nst[_nsp]=MkAssignExp(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+14) : _nsp -= 1;_nst[_nsp]=MkNotExp(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+15) : _nsp -= 1;_nst[_nsp]=MkMonadicExp(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+16) : _incrnodestack();_nst[_nsp]=MkDefiningOccurrence(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+17) : _incrnodestack();_nst[_nsp]=MkAppliedOccurrence(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+18) : _incrnodestack();_nst[_nsp]=MkSlashOp(&curpos); break;
	case (OFFSET+19) : _incrnodestack();_nst[_nsp]=MkStarOp(&curpos); break;
	case (OFFSET+20) : _incrnodestack();_nst[_nsp]=MkPercentOp(&curpos); break;
	case (OFFSET+21) : _incrnodestack();_nst[_nsp]=MkExclOp(&curpos); break;
	case (OFFSET+22) : _incrnodestack();_nst[_nsp]=Mkrule_4(&curpos); break;
	case (OFFSET+23) : _nst[_nsp]=MkInitialize(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+24) : _nst[_nsp]=MkFloatParDecl(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+25) : _nst[_nsp]=MkIntParDecl(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+26) : _nst[_nsp]=Mkrule_5(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+27) : _nsp -= 1;_nst[_nsp]=Mkrule_6(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+28) : _incrnodestack();_nst[_nsp]=MkFloatVal(&curpos, MkFloatDenotation(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+29) : _nst[_nsp]=MkIdnVal(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+30) : _incrnodestack();_nst[_nsp]=MkIntVal(&curpos, MkIntDenotation(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+31) : _nsp -= 2;_nst[_nsp]=MkSource(&curpos, _nst[_nsp+0], MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1))), _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+32) : _nsp -= 2;_nst[_nsp]=MkDyadicExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+33) : _incrnodestack();_nst[_nsp]=MkLessOp(&curpos); break;
	case (OFFSET+34) : _incrnodestack();_nst[_nsp]=MkGreaterOp(&curpos); break;
	case (OFFSET+35) : _incrnodestack();_nst[_nsp]=MkFloatResult(&curpos); break;
	case (OFFSET+36) : _incrnodestack();_nst[_nsp]=MkIntResult(&curpos); break;
	case (OFFSET+37) : _incrnodestack();_nst[_nsp]=Mkrule_7(&curpos); break;
	case (OFFSET+38) : _incrnodestack();_nst[_nsp]=MkBreakStmt(&curpos); break;
	case (OFFSET+39) : _nst[_nsp]=Mkrule_8(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+40) : _incrnodestack();_nst[_nsp]=MkContinueStmt(&curpos); break;
	case (OFFSET+41) : _nst[_nsp]=MkExprStmt(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+42) : _nsp -= 1;_nst[_nsp]=MkOneSided(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+43) : _nsp -= 2;_nst[_nsp]=MkTwoSided(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+44) : _nst[_nsp]=Mkrule_9(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+45) : _nsp -= 1;_nst[_nsp]=Mkrule_10(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+46) : _nst[_nsp]=MkReturnStmt(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+47) : _nst[_nsp]=Mkrule_11(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+48) : _nsp -= 2;_nst[_nsp]=MkDyadicExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+49) : _nsp -= 2;_nst[_nsp]=MkDyadicExp(&curpos, _nst[_nsp+0], _nst[_nsp+1], _nst[_nsp+2]); break;
	case (OFFSET+50) : _incrnodestack();_nst[_nsp]=MkUMinusOp(&curpos); break;
	case (OFFSET+51) : _nsp -= 1;_nst[_nsp]=MkVarDecl(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+52) : _nsp -= 1;_nst[_nsp]=Mkrule_12(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+53) : _nst[_nsp]=Mkrule_13(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+54) : _nst[_nsp]=MkFloatVar(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+55) : _nst[_nsp]=MkIntVar(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+56) : _nst[_nsp]=Mkrule_14(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+57) : _nsp -= 1;_nst[_nsp]=Mkrule_15(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+58) : _nsp -= 1;_nst[_nsp]=MkLoop(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
}
