This is Info file news4.8, produced by Makeinfo-1.43 from the input
file /home/lukem/Dropbox/CAS/eli-4.8.1/Eli/pkg/info/tnf/news4.8.tnf.


File: news4.8,  Node: Top,  Next: Refactor,  Prev: (DIR),  Up: (DIR)

New Features of Eli Version 4.8
*******************************

   This document gives information about new facilities available in
Eli version 4.8 and those modifications made since the previous
distributed Eli version 4.7 that might be of general interest.
Numerous corrections, improvements, and additions have been made
without being described here.

* Menu:

* Refactor::	Refactored top level
* Foreign::	Support for parsers not generated by Eli
* SO::		Shared library product
* Command::	Reporting file opening errors

* Index::


File: news4.8,  Node: Refactor,  Next: Foreign,  Prev: Top,  Up: Top

Refactored top level
********************

   The top level of the Eli system has been refactored to combine the
primary input file open operation with the tree-building operation. 
With this refactoring, the driver of an Eli-generated processor first
invokes a routine to parse the command line (*note top: (clp)top.). 
It then executes any code supplied via ``m'.init' files (*note
Implementing Tree Computations: (comptrees)Implementing.).

   At this point, the driver invokes the `TREEBUILD' routine. 
`TREEBUILD' opens the primary input file, and uses the generated
scanner and parser to build the abstract syntax tree.  If there were
no reports above the `WARNING' severity level (*note Source Text
Coordinates and Error Reporting: (lib)error.), then the driver invokes
the `ATTREVAL' routine to perform the specified computation over the
constructed tree.  Finally, any code supplied via ``m'.finl' files is
executed (*note Implementing Tree Computations:
(comptrees)Implementing.).

   This refactoring allows one to replace `TREEBUILD' with any code
that builds a tree conforming to some LIDO definition (*note Tree
Construction Functions: (lidoref)Tree Construction Functions.).  That
code will usually have its own input module, and may or may not access
command line parameters (*note Accessing the command line:
(clp)Accessing.).


File: news4.8,  Node: Foreign,  Next: SO,  Prev: Refactor,  Up: Top

Support for parsers not generated by Eli
****************************************

   Eli has the ability to generate a complete text processor,
including all of the tree computation needed for contextual analysis. 
It assumes, however, that the input language can be described by a
reasonably consistent grammar.  This is not the always the case, even
for programming languages, and it may be that more ad-hoc methods are
needed to construct a tree that describes the source text.

   There are many tools other than Eli that one can use to create
processors that scan and parse text, and they differ among themselves
in strategy and power.  All support mechanisms to build trees on the
basis of the relationships implicit in the input text.  Once the tree
is built, however, most systems provide no further aid.  The user is
responsible for writing code in C or Java to process and transform the
tree.

   Eli now has the ability to interact with a scanner/parser developed
using any arbitrary technology (*note Using Foreign parsers:
(syntax)Foreign.).  For example, the "foreign" analyzer might be a
collection of C or C++ routines that could be defined by a `specs'
file and invoked by the main program that Eli generates. 
Alternatively, it might be a main program that invokes a shared
library to build and process the tree.  In either case, Eli can
generate code to interact with it and automate the tedious job of
constructing tree computations.


File: news4.8,  Node: SO,  Next: Command,  Prev: Foreign,  Up: Top

Shared library product
**********************

   The `:exe' product is the executable file derived from the
specifications, to be run on the current machine (*note exe --
Executable Version of the Processor: (pp)exe.).  When Eli-generated
code is only a part of a program created by other means, it may be
convenient to encode it as a shared library.  This strategy could be
used, for example, to incorporate Eli-generated code into a Java
program via the Java Native Interface.

   The `:so' product is a shared library file derived from the given
specifications (*note so -- Shared library Version of the Processor:
(pp)so.).  A shared library should not have a main program, and
therefore it should be derived with the `+nomain' opition (*note
nomain -- Omitting the main program: (pp)nomain.).

   When a shared library is used, the program using it normally
requires that the shared library file have a specific name.  Thus the
`:so' product should be copied out of the cache into a file with the
appropriate name (*note Extracting and Editing Objects: (ui)Copy.). 
For example, suppose that we were deriving from `MyProc.fw' and the
required name for the shared library file was `YourLib.so'.  In that
case, an appropriate derivation request might be:

     MyProc.fw +nomain :so > YourLib.so


File: news4.8,  Node: Command,  Next: Index,  Prev: SO,  Up: Top

Reporting file opening errors
*****************************

   The format of a processor's command line can be specified in clp
(*note Command Line Processor: (clp)top.).  In addition to defining
options and parameters, the designer can specify the form of an error
report to be used when a file appearing on the command line cannot be
opened.

   In earlier versions of Eli, this message was only written when the
processor could not open its primary input file.  As a part of the
refactoring to support foreign parsers, we defined a routine
`ClpOpenError' to output the report on request (*note Reporting open
errors: (clp)Reporting open errors.).

   This report will be automatically made if the processor cannot open
the file specified on the command line as its primary source of data
(*note Input parameters: (clp)Input parameters.).  User code can also
make the report if it encounters an error while opening an arbitrary
file.


File: news4.8,  Node: Index,  Prev: Command,  Up: Top

Index
*****

* Menu:

* .finl files:                          Refactor.
* .init files:                          Refactor.
* ATTREVAL:                             Refactor.
* ClpOpenError:                         Command.
* TREEBUILD:                            Refactor.
* WARNING error severity:               Refactor.
* clp:                                  Command.
* command line:                         Refactor.
* command line processor:               Command.
* error severity level WARNING:         Refactor.
* exe:                                  SO.
* file types: .finl:                    Refactor.
* file types: .init:                    Refactor.
* foreign parser:                       Foreign.
* main program:                         SO.
* nomain:                               SO.
* primary input file:                   Refactor.
* shared library:                       SO.
* shared library:                       Foreign.
* so:                                   SO.



Tag Table:
Node: Top139
Node: Refactor749
Node: Foreign2166
Node: SO3693
Node: Command5064
Node: Index6070

End Tag Table
