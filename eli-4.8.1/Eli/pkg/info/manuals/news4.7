This is Info file news4.7, produced by Makeinfo-1.43 from the input
file /home/lukem/Dropbox/CAS/eli-4.8.1/Eli/pkg/info/tnf/news4.7.tnf.


File: news4.7,  Node: Top,  Next: Rulemap,  Prev: (DIR),  Up: (DIR)

New Features of Eli Version 4.7
*******************************

   This document gives information about new facilities available in
Eli version 4.7 and those modifications made since the previous
distributed Eli version 4.6 that might be of general interest.
Numerous corrections, improvements, and additions have been made
without being described here.

* Menu:

* Rulemap::		Abstract Rule Names in Mapping Rules
* Interface::		Change in the Token Processor Interface

* Index::


File: news4.7,  Node: Rulemap,  Next: Interface,  Prev: Top,  Up: Top

Abstract Rule Names in Mapping Rules
************************************

   Some abstract grammars have several rules with different names and
identical signatures (this is relatively common in computed trees,
*note Computed Subtrees: (lidoref)Computed Subtrees.).  If such rules
are represented in an unambiguous manner in text, and that text is
parsed, one must be able to map the disambiguated concrete rules into
the appropriate abstract rules.  Because the abstract rules have
identical signatures, pattern matching won't work.

   In order to solve this problem, the Maptool now accepts an optional
rule name in a rule mapping (*note Specifying rule mappings:
(syntax)Rule Mapping.).  A simple example might be a representation of
dyadic expressions without explicit operators:

     RULE Add: Expression ::= Expression Expression END;
     RULE Mul: Expression ::= Expression Expression END;
     ...

Suppose that such nodes are represented in text by fully-parenthesized
arithmetic expressions in the standard notation.  Rule mappings
specifying the rule names explicitly would then be needed to
disambiguate the pattern match:

     MAPRULE
     Expression: '(' Expression '+' Expression ')' < $1 $2 >: Add .
     Expression: '(' Expression '*' Expression ')' < $1 $2 >: Mul .
     ...


File: news4.7,  Node: Interface,  Next: Index,  Prev: Rulemap,  Up: Top

Change in the Token Processor Interface
***************************************

   Input character strings are converted into internal representations
by token processors (*note Token Processors: (lex)Token Processors.). 
A token processor should not alter the string that it is converting in
any way, but the original interface specification did not enforce that
restriction because C did not provide a const qualifier.

   In many applications, it is important to apply token processors to
literal string constants.  Recent C++ compilers do not allow literal
string constants to be passed to character string parameters that are
not const-qualified.  We therefore decided to alter the token
processor interface by const-qualifying its character string parameter.

   A string pointer that is *not* const-qualified can always be passed
to a const-qualified parameter; only the reverse is prohibited by the C
definition.  Thus this change is transparent, unless you have defined
your own token processors.  In the simplest case, you need only add
the const qualifier to the first parameter in your token processor's
definition.  If your token processor does, however, alter its argument
string (for example, by planting a null character at the end) then it
must be rewritten.


File: news4.7,  Node: Index,  Prev: Interface,  Up: Top

Index
*****

* Menu:

* token processors:                     Interface.



Tag Table:
Node: Top139
Node: Rulemap693
Node: Interface2065
Node: Index3418

End Tag Table
