# $Id: Makefile.in,v 1.8 2010/01/09 17:04:44 profw Exp $
# Copyright (c) 1989, The Regents of the University of Colorado

# We can build four different versions: tty, sunview, xview and Tcl/Tk.

CC	= gcc

# Override the defaults for some things here.

# CP = cp
# DEFAULT_EDITOR = vi
# DEFAULT_PRINTER = postscript
# DEFAULT_WINRUNNER = xterm -e or shelltool
# ISHELL = /bin/sh
# LPR = lpr -P
# MAIL = mail
# MAINTAINER = eli-project-users@lists.sourceforge.net
# MV = mv
# PRINTEXTENSION = .ps
# SCRIPT = script
# SCRIPTOUTPUT = scriptout
# SED = sed
# SHELL = /bin/sh
# TOUCH = touch

# Override things like this:

# OVERRIDES = -DMAINTAINER=\"${MAINTAINER}\"

# Might want to override ISHELL for makeinfo too.

# MIDEFS = -DSHELL="\"${ISHELL}\""

# ---------------------------------------------------------------------------
# Shouldn't need to customize anything below here.

STRBUILD  = strbuild.h $(ADTLIB)/obstack.h
LIBRHDRS  = example.h file.h info.h list.h node.h option.h system.h util.h

BROWSRCS  = example.c file.c info.c list.c node.c option.c system.c \
	    strbuild.c util.c
BROWHDRS  = $(LIBRHDRS) $(STRBUILD) driver.h
BROWOBJS  = example.o file.o info.o list.o node.o option.o system.o \
	    strbuild.o util.o obstack.o

INFOSRCS  = infoReader.c help.c page.c signals.c menunote.c typeout.c complete.c
INFOHDRS  = menunote.h typeout.h
INFOOBJS  = infoReader.o help.o page.o signals.o menunote.o typeout.o complete.o

SUNVSRCS  = infotool.c panel_sw.c text_sw.c complain_sw.c option_sw.c \
            print_sw.c
SUNVHDRS  = panel_sw.h text_sw.h complain_sw.h option_sw.h print_sw.h \
	    infotool.icon
SUNVOBJS  = infotool.o panel_sw.o text_sw.o complain_sw.o option_sw.o \
	    print_sw.o

XVIEWOBJS = infotool_x.o panel_sw_x.o text_sw_x.o complain_sw_x.o \
	    option_sw_x.o print_sw_x.o

TCLSRCS	  = tclinfo.c

AUXHDRS   = $(LIBRHDRS) $(INFOHDRS) $(SUNVHDRS) \
            menunote.h strbuild.h driver.h

SRCS 	  = $(BROWSRCS) $(INFOSRCS) $(SUNVSRCS) $(TCLSRCS) \
            $(AUXHDRS)

DIR	  = pkg/info/texinfo
SRC	  = info.tcl
AUX	  = CheckXref.specs $(SRCS) Makefile Makefile.in \
	    makeinfo.c getopt.c getopt1.c getopt.h texindex.c \
	    help.h page.h signals.h complete.h
CMD	  = 
EXE	  = infoReader.exe tclinfo.exe  makeinfo.exe texindex.exe



# $Id: toolmk.h,v 1.27 2010/07/26 08:55:25 profw Exp $
# Skeleton for Tool Makefile

# The following make macros should be defined in order to use this skeleton:
#
# DIR=pathname of this directory relative to the Eli directory
# SRC=distributed files or directories needed during execution of Eli
# AUX=distributed files or directories not needed during execution of Eli
# CMD=command files needed during execution of Eli
# EXE=executable files needed during execution of Eli
# GEN=files or directories generated but not installed
# GENINS=files or directories generated and installed
# SRCDIR=subdirectories needed during execution of Eli
# AUXDIR=subdirectories not needed during execution of Eli
# PREDIR=subdirectories that need to do pre-distribution steps
#
# NOTE:  make is run on each SRCDIR, AUXDIR, and PREDIR subdirectory,
#        but not on any SRC, AUX or GEN directories

SHELL	= /bin/sh

ELILIB	= $(ELISYS)/pkg/eli

TIDY	= core a.out *.o *~ ERRS *.a $(GEN)
CLEAN	= $(EXE) $(GENINS)

all:	alldir $(SRC) $(CMD) $(EXE) $(GEN) $(GENINS)

install:
	@if test "$(DESTDIR)" = ''; \
	then \
		echo "A destination directory is required for install:"; \
		echo "   $(MAKE) install DESTDIR=destination directory"; \
		exit 1; \
	else :; fi
	@L='$(SRC) $(GENINS)'; \
        if test "$$L" != ' '; then for f in $$L; do \
		echo install -m 644 $$f $(DESTDIR); \
		if test -d $$f; then \
			for i in `find $$f -type d -print`; do \
				if test ! -d $(DESTDIR)/$$i; then \
					umask 002; mkdir $(DESTDIR)/$$i; \
				else :; \
				fi; \
			done; \
			for i in `find $$f -type f -print`; do \
			  cmp -s $$i $(DESTDIR)/$$i || cp $$i $(DESTDIR)/$$i; \
			done; \
		else \
			cmp -s $$f $(DESTDIR)/$$f || cp $$f $(DESTDIR)/$$f; \
		fi; \
		chmod -R u+rw,go-w,go+r $(DESTDIR)/$$f || true; \
		done; else :; fi
	@L='$(EXE) $(CMD)'; \
	if test "$$L" != ' '; then for f in $$L; do \
		echo install -m 755 $$f $(DESTDIR); \
		cmp -s $$f $(DESTDIR)/$$f || cp $$f $(DESTDIR)/$$f; \
		chmod 755 $(DESTDIR)/$$f || true; \
		done; else :; fi
	@L='$(SRCDIR)'; \
	if test "$$L" != ''; then for d in $$L; do \
		if test ! -d $(DESTDIR)/$$d; \
			then umask 002; mkdir $(DESTDIR)/$$d; \
			else :; \
			fi; \
		done; else :; fi
	@L='$(SRCDIR)'; \
	if test "$$L" != ''; then for d in $$L; do \
		if test -r $$d/Makefile; \
		then \
			echo; echo Installing $(DIR)/$$d; \
			DESTDIR="$(DESTDIR)/$$d" export DESTDIR; \
			(cd ./$$d; $(MAKE) DESTDIR=$$DESTDIR install); \
		else \
			echo; echo Copying $(DIR)/$$d; \
			for i in `find $$d -type d -print`; do \
				if test ! -d $(DESTDIR)/$$i; then \
					umask 002; mkdir $(DESTDIR)/$$i; \
				else :; \
				fi; \
			done; \
			for i in `find $$d -type f -print`; do \
			  cmp -s $$i $(DESTDIR)/$$i || cp $$i $(DESTDIR)/$$i; \
			done; \
		fi; done; \
	else :; fi

executable:
	@L='$(SRCDIR)'; \
	if test "$$L" != ''; then for d in $$L; do \
		if test -r $$d/Makefile; \
		then \
			echo " "; echo Making $(DIR)/$$d executable; \
			(cd ./$$d; $(MAKE) executable); \
		else :; fi; done; \
	else :; fi
	rm -rf $(TIDY) $(AUX) $(AUXDIR)

tidy:
	@L='$(SRCDIR) $(AUXDIR)'; \
	if test "$$L" != ' '; then for d in $$L; do \
		if test -r $$d/Makefile; \
		then \
			echo; echo Tidying $(DIR)/$$d; \
			(cd ./$$d; $(MAKE) tidy) || exit 1; \
		else :; fi; done; \
	else :; fi
	rm -rf $(TIDY)

clean:
	@L='$(SRCDIR) $(AUXDIR)'; \
	if test "$$L" != ' '; then for d in $$L; do \
		if test -r $$d/Makefile; \
		then \
			echo; echo Cleaning $(DIR)/$$d; \
			(cd ./$$d; $(MAKE) clean); \
		else :; fi; done; \
	else :; fi
	rm -rf $(TIDY) $(CLEAN)

alldir:
	@L='$(SRCDIR) $(AUXDIR)'; \
	if test "$$L" != ' '; then for d in $$L; do \
		if test -r $$d/Makefile; \
		then \
			echo; echo Making $(DIR)/$$d; \
			(cd ./$$d; \
			$(MAKE) DESTDIR=$(DESTDIR) ELISYS=$(ELISYS) \
				CC="$(CC)" ) || exit 1; \
		else :; fi; done; \
	else :; fi

predist:
	@L='$(PREDIR)'; \
	if test "$$L" != ' '; then for d in $$L; do \
		if test -r $$d/Makefile; \
		then \
			echo; echo Pre-disting $(DIR)/$$d; \
			(cd ./$$d; \
			$(MAKE) DESTDIR=$(DESTDIR) ELISYS=$(ELISYS) \
				ELIDOC="$(ELIDOC)" predist) || exit 1; \
		else :; fi; done; \
	else :; fi
# $Id: Adtmk.h,v 1.6 2001/05/09 20:43:04 waite Exp $
# Abstract data type library

ADTLIB	= $(ELISYS)/pkg/Adt
ADTINCL	= -I$(ADTLIB) -I$(ELILIB)

csm.o:	$(ADTLIB)/csm.c $(ADTLIB)/csm.h $(ELILIB)/eliproto.h
	$(CC) $(CFLAGS) $(ADTINCL) -c $(ADTLIB)/csm.c

obstack.o:	$(ADTLIB)/obstack.c $(ADTLIB)/obstack.h
	$(CC) $(CFLAGS) $(ADTINCL) -c $(ADTLIB)/obstack.c

CFLAGS          = -DMAINTAINER=\"eli-project-users@lists.sourceforge.net\" -I/usr/include \
		  -I../../eli
XCFLAGS		= $(CFLAGS)  -DXVIEW
TCFLAGS		= $(CFLAGS) -I/opt/ActiveTcl-8.6/include -DUSE_INTERP_ERRORLINE 

LIBS		= -lncurses -ltermcap
XVIEWLIBS	=  -lxview -lolgx -lX11   
TCLLIBS		= -L/opt/ActiveTcl-8.6/lib -ltk8.6 -L/opt/ActiveTcl-8.6/lib -ltcl8.6 -L/usr/X11R6/lib64 -lX11 -lXss -lXext -L/usr/X11R6/lib64 -lXft -lX11 -lfreetype -lfontconfig -L/usr/X11R6/lib64 -lXrender -lfontconfig  -lpthread -ldl -lz  -lpthread -lieee -lm

info.exe:	info.sh
	rm -f $@
	ln info.sh $@
	chmod 775 $@

# infoReader

infoReader.exe:	info.a $(INFOOBJS)
	$(CC) $(LDFLAGS) -o $@ $(INFOOBJS) info.a $(LIBS)

infoReader.o:	$(INFOHDRS) menunote.h

# xinfotool	

xinfotool:	info.a $(XVIEWOBJS)
	$(CC) $(LDFLAGS) -o xinfotool $(XVIEWOBJS) info.a $(XVIEWLIBS)

$(XVIEWOBJS):	info.h $(SUNVHDRS)

.SUFFIXES:	_x.o .o .c

.c_x.o:
	$(CC) $(XCFLAGS) -c $< -o $*_x.o

# tclinfo

tclinfo.exe:	info.a tclinfo.o
	$(CC) $(LDFLAGS) -o $@ tclinfo.o info.a $(TCLLIBS)

tclinfo.o:	tclinfo.c $(LIBRHDRS)
	$(CC) $(TCFLAGS) -c tclinfo.c

# The standard library.

info.a:		$(BROWOBJS)
	ar rcu $@ $(BROWOBJS)
	ranlib $@

# Auxiliary programs.

makeinfo.exe:	makeinfo.c getopt.c getopt1.c getopt.h
	$(CC) $(CFLAGS) $(MIDEFS) -o $@ makeinfo.c getopt.c getopt1.c

texindex.exe:	texindex.c
	$(CC) $(CFLAGS) -o $@ texindex.c

# Development tools.

kbdlint:	$(INFOSRCS) $(INFOHDRS) $(BROWSRCS) $(BROWHDRS)
	lint $(INFOSRCS) $(BROWSRCS)

sunlint:	$(SUNVSRCS) $(BROWSRCS) $(BROWHDRS)
	lint $(SUNVSRCS) $(BROWSRCS)

TAGS:		$(SRCS)
	etags $(SRCS)

.SUFFIXES:	.exe
.c.exe:
	$(CC) $(CFLAGS) -o $@ $*.c

complete.o:	complete.c info.h $(STRBUILD) typeout.h system.h complete.h
	$(CC) $(CFLAGS) $(ADTINCL) -c complete.c

infoReader.o:	infoReader.c info.h $(STRBUILD) file.h node.h option.h \
		help.h page.h signals.h complete.h
	$(CC) $(CFLAGS) $(ADTINCL) -c infoReader.c

strbuild.o:	strbuild.c $(STRBUILD)
	$(CC) $(CFLAGS) $(ADTINCL) -c strbuild.c

complain_sw.o:	info.h file.h
example.o:	info.h file.h node.h option.h list.h
file.o:		info.h file.h option.h system.h
getopt1.o:	getopt.h
help.o:		info.h typeout.h
info.o:		info.h node.h system.h
infotool.o:	info.h panel_sw.h text_sw.h complain_sw.h option_sw.h \
		infotool.icon option.h
list.o:		info.h system.h util.h
makeinfo.o:	getopt.h
menunote.o:	info.h node.h list.h
node.o:		info.h file.h node.h system.h util.h
option.o:	info.h option.h system.h
option_sw.o:	info.h option.h system.h
page.o:		info.h node.h
panel_sw.o:	info.h complain_sw.h option_sw.h print_sw.h
print_sw.o:	info.h file.h node.h option.h
signals.o:	info.h
system.o:	info.h file.h driver.h system.h
termio.o:	info.h
text_sw.o:	info.h panel_sw.h
typeout.o:	info.h typeout.h
util.o:		info.h option.h util.h






